2024-11-25 01:28:06,099 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:28:06,101 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:28:06,164 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:28:07,804 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:28:07,913 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:28:07,913 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001E08C35A990>
2024-11-25 01:28:08,389 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:28:08,452 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:28:08,452 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:28:08,516 - werkzeug - INFO - [_internal.py:96] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-11-25 01:28:08,516 - werkzeug - INFO - [_internal.py:96] - [33mPress CTRL+C to quit[0m
2024-11-25 01:28:08,531 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 01:28:11,226 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:28:11,226 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:28:11,351 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:28:12,986 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:28:13,113 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:28:13,113 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x00000220E9EF7A10>
2024-11-25 01:28:13,526 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:28:13,589 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:28:13,589 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:28:13,601 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 01:28:13,605 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 01:28:26,723 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:28:27,254 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:28:27,255 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:28:27,255 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:28:27,268 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:28:27] "GET / HTTP/1.1" 200 -
2024-11-25 01:29:00,803 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:01,041 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:01,042 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:01,042 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:29:01,043 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:01] "GET / HTTP/1.1" 200 -
2024-11-25 01:29:02,380 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:02,443 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:02,443 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:02,615 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:02] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:29:02,714 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:02,722 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:02,733 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:02,745 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:02,868 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:02,868 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:02,869 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:02] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 01:29:03,045 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:03,045 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:03,047 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:03] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:29:03,058 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:03,059 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:03,060 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:03,060 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:03] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:29:03,061 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:03,063 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:03] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:29:04,613 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:04,676 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:04,676 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:04,676 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-25 01:29:05,023 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-25 01:29:05,023 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:05] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:29:09,663 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:09,785 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:09,785 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:09,788 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 01:29:09,788 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 01:29:09,789 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 01:29:10,376 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 01:29:10,376 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:10] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 01:29:15,127 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:15,369 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:15,369 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:15,370 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 01:29:15,488 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 01:29:15,489 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:15] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 01:29:48,762 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:29:48,889 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:29:48,889 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:29:48,889 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 01:29:48,889 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 01:29:48,889 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 01:29:49,710 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 01:29:49,726 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:29:49] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 01:34:44,628 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:35:03,870 - neo4j.io - ERROR - [_bolt.py:1037] - [#CA08]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 01:35:03,870 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 01:35:03,870 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 01:35:03,870 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 01:35:03,870 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 01:35:03,870 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 01:35:03,988 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 01:35:03,988 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:35:03] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 01:36:09,761 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:36:10,254 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:36:10,254 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:36:10,254 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 01:36:10,255 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 01:36:10,255 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2024'}
2024-11-25 01:36:10,730 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 01:36:10,732 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:36:10] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 01:36:24,713 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:36:24,961 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:36:24,962 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:36:24,962 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 01:36:24,962 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 01:36:24,963 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 01:36:25,782 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 01:36:25,791 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:36:25] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 01:44:44,599 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:45:03,855 - neo4j.io - ERROR - [_bolt.py:1037] - [#CC3F]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 01:45:03,855 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 01:45:03,857 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 01:45:03,857 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 01:45:03,857 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 01:45:03,857 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 01:45:03,966 - routes.search - INFO - [search.py:47] - Providencia encontrada: A053-24
2024-11-25 01:45:03,966 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:45:03] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 01:48:51,803 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\search.py', reloading
2024-11-25 01:48:51,804 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 01:48:52,345 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 01:48:57,595 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:48:57,596 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:48:57,708 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:48:59,412 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:48:59,527 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:48:59,528 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000002341220B170>
2024-11-25 01:49:00,053 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:49:00,111 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:49:00,119 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:49:00,150 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 01:49:00,156 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 01:49:13,866 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:14,327 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:14,327 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:14,328 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:49:14,369 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:14] "GET / HTTP/1.1" 200 -
2024-11-25 01:49:15,633 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:15,689 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:15,696 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:15,701 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:15,748 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:15,749 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:15,877 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:15] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:49:15,925 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:15] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:49:16,040 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:16,052 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:16,075 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:16,129 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:16,129 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:16,149 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:16] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:49:16,321 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:16,323 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:16,325 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:16] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:49:16,348 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:16,348 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:16,349 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:16] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 01:49:17,916 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:17,976 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:17,976 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:17,976 - routes.search - INFO - [search.py:130] - Obteniendo estad√≠sticas
2024-11-25 01:49:18,328 - routes.search - INFO - [search.py:158] - Estad√≠sticas generadas exitosamente
2024-11-25 01:49:18,328 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:18] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:49:33,007 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:33,184 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:33,184 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:33,184 - routes.search - INFO - [search.py:26] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 01:49:33,296 - routes.search - INFO - [search.py:48] - Providencia encontrada: A053-24
2024-11-25 01:49:33,296 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:33] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 01:49:58,762 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:49:58,892 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:49:58,892 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:49:58,892 - routes.search - INFO - [search.py:62] - Iniciando b√∫squeda general
2024-11-25 01:49:58,892 - routes.search - INFO - [search.py:69] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 01:49:58,892 - routes.search - INFO - [search.py:103] - Query final: {'anio': '2024'}
2024-11-25 01:49:59,352 - routes.search - INFO - [search.py:116] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 01:49:59,367 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:49:59] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 01:50:03,791 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:50:03,854 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:50:03,854 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:50:03,854 - routes.search - INFO - [search.py:62] - Iniciando b√∫squeda general
2024-11-25 01:50:03,854 - routes.search - INFO - [search.py:69] - Par√°metros limpios: {}
2024-11-25 01:50:03,854 - routes.search - INFO - [search.py:103] - Query final: {}
2024-11-25 01:50:04,682 - routes.search - INFO - [search.py:116] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 01:50:04,689 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:50:04] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 01:52:00,680 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\search.py', reloading
2024-11-25 01:52:00,708 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 01:52:01,485 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 01:52:04,790 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:52:04,791 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:52:04,963 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:52:06,557 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:52:06,673 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:52:06,674 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x0000023AFA388680>
2024-11-25 01:52:07,218 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:52:07,280 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:52:07,281 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:52:07,292 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 01:52:07,296 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 01:52:26,200 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:26,645 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:26,645 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:26,646 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:52:26,654 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:26] "GET / HTTP/1.1" 200 -
2024-11-25 01:52:27,980 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:27,986 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:28,044 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:28,049 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:28,075 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:28,076 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:28,205 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:28] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:52:28,230 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:28,234 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:28] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:52:28,268 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:28,275 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:28,297 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:28,310 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:28,312 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:28] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 01:52:28,331 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:28,333 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:28,334 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:28] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:52:28,368 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:28,369 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:28,370 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:28] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:52:30,086 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:30,134 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:30,134 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:30,134 - routes.search - INFO - [search.py:130] - Obteniendo estad√≠sticas
2024-11-25 01:52:30,483 - routes.search - INFO - [search.py:158] - Estad√≠sticas generadas exitosamente
2024-11-25 01:52:30,483 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:30] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:52:45,619 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:52:45,739 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:52:45,739 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:52:45,739 - routes.search - INFO - [search.py:26] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 01:52:45,858 - routes.search - INFO - [search.py:48] - Providencia encontrada: A053-24
2024-11-25 01:52:45,858 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:52:45] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 01:54:30,281 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\search.py', reloading
2024-11-25 01:54:30,282 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 01:54:30,890 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 01:54:34,392 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:54:34,393 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:54:34,491 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:54:36,123 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:54:36,240 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:54:36,256 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001F3A1F4B320>
2024-11-25 01:54:36,775 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:54:36,839 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:54:36,840 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:54:36,849 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 01:54:36,852 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 01:54:57,730 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:54:58,232 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:54:58,232 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:54:58,233 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:54:58,240 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:54:58] "GET / HTTP/1.1" 200 -
2024-11-25 01:54:59,480 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:54:59,546 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:54:59,546 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:54:59,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:54:59,633 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:54:59] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:54:59,639 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:54:59,639 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:54:59,641 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:54:59] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:54:59,791 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:54:59,876 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:54:59,928 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:54:59,930 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:54:59] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:54:59,955 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:54:59,955 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:00,047 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:00,047 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:00,049 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:00] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 01:55:00,224 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:00,224 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:00,228 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:00] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:55:01,760 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:01,823 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:01,823 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:01,823 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 01:55:02,175 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 01:55:02,175 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:02] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:55:04,477 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:04,540 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:04,540 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:04,540 - routes.search - INFO - [search.py:26] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 01:55:04,668 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 01:55:04,668 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:04] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 01:55:33,674 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:33,805 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:33,811 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:33,811 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 01:55:33,811 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2023'}
2024-11-25 01:55:33,811 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2023'}
2024-11-25 01:55:34,163 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 01:55:34,163 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:34] "[35m[1mGET /api/search?anio=2023 HTTP/1.1[0m" 2 -
2024-11-25 01:55:40,245 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:40,340 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:40,340 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:40,340 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 01:55:40,340 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 01:55:40,340 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 01:55:40,965 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:55:41,018 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:55:41,018 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:55:41,018 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 01:55:41,028 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 01:55:41,028 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 01:55:41,159 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 01:55:41,163 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:41] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 01:55:42,417 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 01:55:42,433 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:55:42] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 01:57:33,235 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\search.py', reloading
2024-11-25 01:57:33,238 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 01:57:33,955 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 01:57:37,367 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 01:57:37,370 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 01:57:37,499 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 01:57:39,082 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 01:57:39,198 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 01:57:39,199 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001C37F3D8050>
2024-11-25 01:57:39,842 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 01:57:39,906 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 01:57:39,907 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 01:57:39,913 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 01:57:39,923 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 01:57:46,043 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:57:46,482 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:57:46,482 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:57:46,482 - routes.search - INFO - [search.py:26] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 01:57:46,609 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 01:57:46,609 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:57:46] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:02:48,717 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:03:08,001 - neo4j.io - ERROR - [_bolt.py:1037] - [#D2DF]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 02:03:08,001 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 02:03:08,001 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 02:03:08,001 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 02:03:08,001 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 02:03:08,001 - routes.search - INFO - [search.py:26] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 02:03:08,113 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 02:03:08,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:03:08] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:12:58,316 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\search.py', reloading
2024-11-25 02:12:58,317 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 02:12:58,980 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 02:13:02,803 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 02:13:02,805 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 02:13:02,969 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 02:13:04,554 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 02:13:04,670 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 02:13:04,671 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x0000026A0762D310>
2024-11-25 02:13:05,246 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 02:13:05,312 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 02:13:05,313 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 02:13:05,321 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 02:13:05,328 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 02:13:07,950 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:08,398 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:08,398 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:08,400 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 02:13:08,407 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:08] "GET / HTTP/1.1" 200 -
2024-11-25 02:13:09,625 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:09,682 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:09,689 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:09,690 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:09,746 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:09,747 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:09,932 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:09] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 02:13:09,942 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:09,956 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:09] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 02:13:10,011 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:10,034 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:10,050 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:10,051 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:10,055 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:10] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 02:13:10,115 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:10,115 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:10,116 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:10] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 02:13:10,321 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:10,327 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:10,329 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:10] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 02:13:11,882 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:11,948 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:11,952 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:11,953 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 02:13:12,290 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 02:13:12,290 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:12] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 02:13:16,651 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:16,822 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:16,822 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:16,822 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A
2024-11-25 02:13:16,822 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A
2024-11-25 02:13:16,822 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:16] "[31m[1mGET /api/providencia/A HTTP/1.1[0m" 400 -
2024-11-25 02:13:18,840 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:18,888 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:18,888 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:18,904 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A056
2024-11-25 02:13:18,904 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A056
2024-11-25 02:13:18,904 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:18] "[31m[1mGET /api/providencia/A056 HTTP/1.1[0m" 400 -
2024-11-25 02:13:19,570 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:19,634 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:19,634 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:19,634 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A05
2024-11-25 02:13:19,634 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A05
2024-11-25 02:13:19,649 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:19] "[31m[1mGET /api/providencia/A05 HTTP/1.1[0m" 400 -
2024-11-25 02:13:20,385 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:20,449 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:20,449 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:20,449 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053
2024-11-25 02:13:20,449 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A053
2024-11-25 02:13:20,449 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:20] "[31m[1mGET /api/providencia/A053 HTTP/1.1[0m" 400 -
2024-11-25 02:13:24,163 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:24,232 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:24,232 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:24,233 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-
2024-11-25 02:13:24,233 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A053-
2024-11-25 02:13:24,234 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:24] "[31m[1mGET /api/providencia/A053- HTTP/1.1[0m" 400 -
2024-11-25 02:13:26,882 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:26,945 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:26,945 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:26,945 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 02:13:27,059 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 02:13:27,059 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:27] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:13:31,951 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:32,077 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:32,078 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:32,078 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:32] "[33mGET /api/providencia/ HTTP/1.1[0m" 404 -
2024-11-25 02:13:49,837 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:49,930 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:49,930 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:49,930 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:13:49,930 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 02:13:49,930 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 02:13:50,398 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 02:13:50,398 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:50] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 02:13:59,663 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:13:59,730 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:13:59,730 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:13:59,730 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 02:13:59,837 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 02:13:59,853 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:13:59] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:16:58,194 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:16:58,320 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:16:58,320 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:16:58,320 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:16:58,320 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024', 'texto': 'A053-24'}
2024-11-25 02:16:58,320 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024', '$text': {'$search': 'A053-24'}}
2024-11-25 02:16:58,796 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 4
2024-11-25 02:16:58,798 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:16:58] "[31m[1mGET /api/search?anio=2024&texto=A053-24 HTTP/1.1[0m" 4 -
2024-11-25 02:17:02,254 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:17:02,317 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:17:02,317 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:17:02,318 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:17:02,318 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 02:17:02,318 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 02:17:02,789 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 02:17:02,789 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:17:02] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 02:17:04,710 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:17:04,773 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:17:04,788 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:17:04,788 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24A053-24
2024-11-25 02:17:04,788 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A053-24A053-24
2024-11-25 02:17:04,788 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:17:04] "[31m[1mGET /api/providencia/A053-24A053-24 HTTP/1.1[0m" 400 -
2024-11-25 02:17:09,432 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:17:09,483 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:17:09,483 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:17:09,496 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 02:17:09,613 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 02:17:09,613 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:17:09] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:18:31,714 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:31,843 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:31,843 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:31,844 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A
2024-11-25 02:18:31,844 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A
2024-11-25 02:18:31,845 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:31] "[31m[1mGET /api/providencia/A HTTP/1.1[0m" 400 -
2024-11-25 02:18:32,880 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:32,947 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:32,947 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:32,947 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 02:18:32,948 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:32] "GET / HTTP/1.1" 200 -
2024-11-25 02:18:34,477 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:34,525 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:34,541 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:34,541 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:34,543 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:34] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 02:18:34,587 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:34,588 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:34,589 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:34] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 02:18:34,593 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:34,594 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:34,608 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:34,657 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:34,657 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:34,659 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:34] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 02:18:34,719 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:34,733 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:34,734 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:34] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 02:18:38,886 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:38,950 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:38,950 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:38,951 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: 053-24
2024-11-25 02:18:38,951 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: 053-24
2024-11-25 02:18:38,952 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:38] "[31m[1mGET /api/providencia/053-24 HTTP/1.1[0m" 400 -
2024-11-25 02:18:47,722 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:47,797 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:47,797 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:47,797 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: a053-24
2024-11-25 02:18:47,798 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: a053-24
2024-11-25 02:18:47,798 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:47] "[31m[1mGET /api/providencia/a053-24 HTTP/1.1[0m" 400 -
2024-11-25 02:18:53,880 - neo4j.io - ERROR - [_bolt.py:1037] - [#D6E9]  _: <CONNECTION> error: Failed to read from defunct connection IPv4Address(('f087ea43.databases.neo4j.io', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 02:18:53,880 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Failed to read from defunct connection IPv4Address(('f087ea43.databases.neo4j.io', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687)))
2024-11-25 02:18:53,882 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 02:18:53,882 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 02:18:53,883 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:53] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 02:18:54,508 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:54,760 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:54,760 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:54,760 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: 053-24
2024-11-25 02:18:54,760 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: 053-24
2024-11-25 02:18:54,760 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:54] "[31m[1mGET /api/providencia/053-24 HTTP/1.1[0m" 400 -
2024-11-25 02:18:54,905 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:54,961 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:54,961 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:54,961 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 02:18:55,085 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 02:18:55,085 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:55] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 02:18:55,398 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:18:55,462 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:18:55,462 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:18:55,462 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 02:18:55,805 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 02:18:55,805 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:18:55] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 02:19:04,529 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:19:04,609 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:19:04,609 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:19:04,609 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:19:04,609 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:19:04,609 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:19:05,422 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:19:05,422 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:19:05] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 02:19:54,054 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:19:54,179 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:19:54,179 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:19:54,179 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: C-440-22
2024-11-25 02:19:54,653 - routes.search - INFO - [search.py:52] - Providencia encontrada: C-440-22
2024-11-25 02:19:54,653 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:19:54] "GET /api/providencia/C-440-22 HTTP/1.1" 200 -
2024-11-25 02:20:00,570 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:20:00,643 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:20:00,643 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:20:00,644 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:20:00,644 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:20:00,644 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:20:01,449 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:20:01,464 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:20:01] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 02:21:26,728 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:26,871 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:26,876 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:26,876 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:26,876 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 02:21:26,882 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 02:21:26,999 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 02:21:27,000 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:27] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 02:21:33,553 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:33,616 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:33,616 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:33,617 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:33,617 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:33,617 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:34,431 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:34,431 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:34] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 02:21:34,962 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:35,030 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:35,030 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:35,031 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:35,031 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:35,032 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:35,389 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:35,396 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:35] "[35m[1mGET /api/search?anio=2 HTTP/1.1[0m" 21 -
2024-11-25 02:21:36,262 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:36,329 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:36,329 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:36,329 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:36,329 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2021'}
2024-11-25 02:21:36,329 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2021'}
2024-11-25 02:21:36,569 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 02:21:36,569 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:36] "[35m[1mGET /api/search?anio=2021 HTTP/1.1[0m" 6 -
2024-11-25 02:21:43,184 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:43,264 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:43,264 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:43,264 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:43,264 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:43,264 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:43,340 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:43,406 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:43,406 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:43,406 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:43,406 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:43,406 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:44,073 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:44,088 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:44] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 02:21:44,805 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:44,805 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:44] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 02:21:48,304 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:48,367 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:48,367 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:48,367 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:48,367 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:48,367 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:49,170 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:49,170 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:49] "[35m[1mGET /api/search?anio=201 HTTP/1.1[0m" 21 -
2024-11-25 02:21:49,309 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:49,367 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:49,367 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:49,367 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:49,367 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 02:21:49,367 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 02:21:49,489 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 02:21:49,489 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:49] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 02:21:53,183 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:53,246 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:53,246 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:53,246 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:53,246 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:53,246 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:53,669 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:53,730 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:53,730 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:53,730 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:53,730 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:21:53,730 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:21:54,056 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:54,070 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:54] "[35m[1mGET /api/search?anio=201 HTTP/1.1[0m" 21 -
2024-11-25 02:21:54,547 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:21:54,554 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:54] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 02:21:54,949 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:21:55,026 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:21:55,026 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:21:55,026 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:21:55,026 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2021'}
2024-11-25 02:21:55,028 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2021'}
2024-11-25 02:21:55,148 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 02:21:55,148 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:21:55] "[35m[1mGET /api/search?anio=2021 HTTP/1.1[0m" 6 -
2024-11-25 02:22:07,180 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:22:07,337 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:22:07,337 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:22:07,337 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:22:07,337 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2011'}
2024-11-25 02:22:07,337 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2011'}
2024-11-25 02:22:07,448 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 02:22:07,448 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:22:07] "[35m[1mGET /api/search?anio=2011 HTTP/1.1[0m" 0 -
2024-11-25 02:22:14,617 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 02:22:14,680 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 02:22:14,680 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 02:22:14,680 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 02:22:14,680 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 02:22:14,680 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 02:22:15,504 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 02:22:15,513 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 02:22:15] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:08:46,578 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 19:08:46,580 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 19:08:46,720 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 19:08:48,401 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 19:08:48,517 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 19:08:48,518 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x00000241004EF0B0>
2024-11-25 19:08:49,140 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 19:08:49,199 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 19:08:49,200 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 19:08:49,323 - werkzeug - INFO - [_internal.py:96] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-11-25 19:08:49,324 - werkzeug - INFO - [_internal.py:96] - [33mPress CTRL+C to quit[0m
2024-11-25 19:08:49,335 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 19:08:53,499 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 19:08:53,499 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 19:08:53,587 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 19:08:55,510 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 19:08:55,626 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 19:08:55,628 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001F641EE00E0>
2024-11-25 19:08:56,090 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 19:08:56,157 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 19:08:56,159 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 19:08:56,168 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 19:08:56,174 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 19:09:08,011 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:08,669 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:08,671 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:08,674 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:08] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2024-11-25 19:09:19,283 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:19,411 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:19,411 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:19,411 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 19:09:19,449 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:19] "GET / HTTP/1.1" 200 -
2024-11-25 19:09:20,722 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:20,783 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:20,784 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:20,979 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:20] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 19:09:21,101 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:21,142 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:21,143 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:21,148 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:21,161 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:21,161 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:21,189 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:21] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 19:09:21,207 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:21,210 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:21,227 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:21] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 19:09:21,259 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:21,259 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:21,300 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:21,301 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:21,324 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:21] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 19:09:21,376 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:21] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 19:09:23,007 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:23,066 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:23,066 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:23,067 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 19:09:23,427 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 19:09:23,427 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:23] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 19:09:27,439 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:27,502 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:27,502 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:27,503 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:27,503 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 19:09:27,503 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 19:09:28,085 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 19:09:28,088 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:28] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 19:09:31,542 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:31,620 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:31,621 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:31,621 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:31,621 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:09:31,622 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:09:32,438 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:09:32,449 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:32] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:09:35,478 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:35,539 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:35,539 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:35,539 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:35,540 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-25 19:09:35,540 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-25 19:09:36,118 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 19:09:36,120 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:36] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-25 19:09:40,604 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:40,665 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:40,665 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:40,666 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:40,666 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Tutela'}
2024-11-25 19:09:40,666 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^T-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Tutela'}
2024-11-25 19:09:41,359 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 19:09:41,363 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:41] "[35m[1mGET /api/search?tipo=Tutela HTTP/1.1[0m" 6 -
2024-11-25 19:09:44,786 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:44,846 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:44,846 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:44,847 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:44,847 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:09:44,847 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:09:45,659 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:09:45,667 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:45] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:09:49,872 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:50,031 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:50,032 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:50,032 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:50,032 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:09:50,033 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:09:50,846 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:09:50,854 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:50] "[35m[1mGET /api/search?anio=201 HTTP/1.1[0m" 21 -
2024-11-25 19:09:51,416 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:51,476 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:51,476 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:51,477 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:51,477 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 19:09:51,478 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 19:09:51,596 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 19:09:51,596 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:51] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 19:09:56,796 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:56,876 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:56,877 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:56,877 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:56,878 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:09:56,878 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:09:57,259 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:57,319 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:57,319 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:57,320 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:57,320 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:09:57,320 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:09:57,696 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:09:57,708 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:57] "[35m[1mGET /api/search?anio=2 HTTP/1.1[0m" 21 -
2024-11-25 19:09:58,726 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:09:58,735 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:58] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 19:09:59,712 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:09:59,778 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:09:59,778 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:09:59,778 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:09:59,779 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2000'}
2024-11-25 19:09:59,779 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2000'}
2024-11-25 19:09:59,897 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 19:09:59,897 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:09:59] "[35m[1mGET /api/search?anio=2000 HTTP/1.1[0m" 0 -
2024-11-25 19:10:07,833 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:07,970 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:07,970 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:07,972 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:07,990 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '1900'}
2024-11-25 19:10:07,991 - routes.search - INFO - [search.py:107] - Query final: {'anio': '1900'}
2024-11-25 19:10:08,113 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 19:10:08,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:08] "[35m[1mGET /api/search?anio=1900 HTTP/1.1[0m" 0 -
2024-11-25 19:10:13,094 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:13,155 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:13,156 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:13,156 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:13,157 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:10:13,157 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:10:13,706 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:13,769 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:13,771 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:13,772 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:13,772 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2009'}
2024-11-25 19:10:13,772 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2009'}
2024-11-25 19:10:13,974 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:10:13,983 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:13] "[35m[1mGET /api/search?anio=2 HTTP/1.1[0m" 21 -
2024-11-25 19:10:14,004 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 19:10:14,006 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:14] "[1mGET /api/search?anio=2009 HTTP/1.1[0m" 1 -
2024-11-25 19:10:20,673 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:20,944 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:20,945 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:20,949 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:20,950 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2010'}
2024-11-25 19:10:20,961 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2010'}
2024-11-25 19:10:21,424 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 19:10:21,426 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:21] "[1mGET /api/search?anio=2010 HTTP/1.1[0m" 1 -
2024-11-25 19:10:28,745 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:28,806 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:28,806 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:28,807 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:28,807 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2020'}
2024-11-25 19:10:28,807 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2020'}
2024-11-25 19:10:29,279 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 19:10:29,281 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:29] "[35m[1mGET /api/search?anio=2020 HTTP/1.1[0m" 5 -
2024-11-25 19:10:35,129 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:35,285 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:35,286 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:35,286 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:35,287 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:10:35,287 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:10:35,772 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:35,832 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:35,833 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:35,835 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:35,836 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2021'}
2024-11-25 19:10:35,837 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2021'}
2024-11-25 19:10:36,101 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:10:36,114 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:36] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 19:10:36,415 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 19:10:36,418 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:36] "[35m[1mGET /api/search?anio=2021 HTTP/1.1[0m" 6 -
2024-11-25 19:10:42,975 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:43,035 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:43,035 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:43,036 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:43,036 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2022'}
2024-11-25 19:10:43,036 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2022'}
2024-11-25 19:10:43,500 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 19:10:43,500 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:43] "[1mGET /api/search?anio=2022 HTTP/1.1[0m" 1 -
2024-11-25 19:10:50,653 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:50,775 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:50,775 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:50,776 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:50,776 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2023'}
2024-11-25 19:10:50,776 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2023'}
2024-11-25 19:10:51,128 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 19:10:51,129 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:51] "[35m[1mGET /api/search?anio=2023 HTTP/1.1[0m" 2 -
2024-11-25 19:10:57,206 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:10:57,270 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:10:57,271 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:10:57,271 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:10:57,272 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 19:10:57,272 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 19:10:57,748 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 19:10:57,751 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:10:57] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 19:11:05,386 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:05,461 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:05,462 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:05,462 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 19:11:05,581 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 19:11:05,582 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:05] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 19:11:11,337 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:11,398 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:11,399 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:11,399 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:11,400 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:11:11,400 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:11:12,217 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:11:12,228 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:12] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:11:19,319 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:19,441 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:19,441 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:19,442 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:19,442 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:11:19,443 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:11:20,263 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:11:20,271 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:20] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:11:20,457 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:20,516 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:20,516 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:20,517 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 19:11:20,635 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 19:11:20,636 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:20] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 19:11:30,235 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:30,364 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:30,365 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:30,365 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:30,365 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:11:30,366 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:11:31,182 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:11:31,192 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:31] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:11:35,993 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:36,053 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:36,053 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:36,053 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:36,054 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Tutela'}
2024-11-25 19:11:36,054 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^T-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Tutela'}
2024-11-25 19:11:36,750 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 19:11:36,754 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:36] "[35m[1mGET /api/search?tipo=Tutela HTTP/1.1[0m" 6 -
2024-11-25 19:11:45,222 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:45,360 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:45,360 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:45,361 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:45,361 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:11:45,362 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:11:46,181 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:11:46,189 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:46] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:11:48,769 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:48,829 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:48,830 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:48,831 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: T-012-24
2024-11-25 19:11:49,294 - routes.search - INFO - [search.py:52] - Providencia encontrada: T-012-24
2024-11-25 19:11:49,295 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:49] "GET /api/providencia/T-012-24 HTTP/1.1" 200 -
2024-11-25 19:11:54,659 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:11:54,739 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:11:54,739 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:11:54,740 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:11:54,740 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:11:54,740 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:11:55,554 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:11:55,561 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:11:55] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:12:08,686 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:08,895 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:08,895 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:08,896 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: C-529-10
2024-11-25 19:12:09,359 - routes.search - INFO - [search.py:52] - Providencia encontrada: C-529-10
2024-11-25 19:12:09,361 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:09] "GET /api/providencia/C-529-10 HTTP/1.1" 200 -
2024-11-25 19:12:14,465 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:14,525 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:14,525 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:14,526 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:14,526 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:12:14,526 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:12:15,340 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:12:15,347 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:15] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:12:21,737 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:21,896 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:21,897 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:21,897 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:21,897 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 19:12:21,898 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 19:12:22,485 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 19:12:22,490 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:22] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 19:12:30,189 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:30,249 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:30,250 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:30,250 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 19:12:30,368 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 19:12:30,369 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:30] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 19:12:34,977 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:35,132 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:35,132 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:35,133 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:35,133 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:12:35,133 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:12:35,949 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:12:35,957 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:35] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:12:40,222 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:40,283 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:40,283 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:40,284 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:40,284 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 19:12:40,284 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 19:12:40,872 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 19:12:40,874 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:40] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 19:12:43,851 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:43,910 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:43,910 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:43,911 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:43,911 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-25 19:12:43,911 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-25 19:12:44,490 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 19:12:44,492 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:44] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-25 19:12:58,064 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:12:58,208 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:12:58,208 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:12:58,209 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:12:58,209 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:12:58,210 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:12:59,025 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:12:59,036 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:12:59] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:13:12,292 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:13:12,466 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:13:12,466 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:13:12,467 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:13:12,467 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:13:12,467 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:13:13,162 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:13:13,221 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:13:13,222 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:13:13,223 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 19:13:13,280 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:13:13,288 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:13:13] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 19:13:13,340 - routes.search - INFO - [search.py:52] - Providencia encontrada: A053-24
2024-11-25 19:13:13,341 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:13:13] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 19:15:20,754 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:15:20,837 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:15:20,838 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:15:20,839 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A053-2
2024-11-25 19:15:20,840 - routes.search - WARNING - [search.py:37] - Formato de ID inv√°lido: A053-2
2024-11-25 19:15:20,840 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:15:20] "[31m[1mGET /api/providencia/A053-2 HTTP/1.1[0m" 400 -
2024-11-25 19:15:20,876 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 19:15:20,936 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 19:15:20,936 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 19:15:20,937 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 19:15:20,937 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 19:15:20,937 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 19:15:21,752 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 19:15:21,760 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 19:15:21] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 20:06:57,020 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:07:11,390 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:07:18,726 - neo4j.io - ERROR - [_bolt.py:1037] - [#C5D8]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 20:07:18,726 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 20:07:18,726 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 20:07:18,729 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 20:07:18,729 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 20:07:18,729 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-024 (score m√≠n: 0.0)
2024-11-25 20:07:19,233 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:07:19,233 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:07:19,233 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.0)
2024-11-25 20:07:19,269 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,281 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:07:19] "[33mGET /api/graph/T-012-024?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 20:07:19,328 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:07:19] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 20:49:25,052 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 20:49:25,054 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 20:49:25,653 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 20:49:29,616 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 20:49:29,636 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 20:49:29,763 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 20:49:31,372 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 20:49:31,489 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 20:49:31,490 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x00000177C21ABFB0>
2024-11-25 20:49:32,111 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 20:49:32,174 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 20:49:32,176 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 20:49:32,213 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 20:49:32,218 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 20:49:41,625 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:42,197 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:42,198 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:42,199 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 20:49:42,315 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:42] "GET / HTTP/1.1" 200 -
2024-11-25 20:49:43,522 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:43,578 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:43,579 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:43,583 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:43,642 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:43,662 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:43,798 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:43] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 20:49:43,831 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:43,844 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:43] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 20:49:43,883 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:43,898 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:43,910 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:43,912 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:43] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 20:49:43,923 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:43,963 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:43,966 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:43,967 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:43] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 20:49:44,001 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:44,001 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:44,003 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:44] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 20:49:45,568 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:49:45,631 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:49:45,631 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:49:45,631 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 20:49:45,984 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 20:49:45,984 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:49:45] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 20:58:21,187 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:40,452 - neo4j.io - ERROR - [_bolt.py:1037] - [#D5DC]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 20:58:40,453 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 20:58:40,454 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 20:58:40,454 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 20:58:40,455 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 20:58:40,456 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 20:58:40,457 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:40] "GET / HTTP/1.1" 200 -
2024-11-25 20:58:41,760 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:41,794 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:42,025 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:42,030 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:42,058 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:42,325 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:42,325 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:42,325 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:42,325 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:42,328 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:42] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 20:58:42,330 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:42] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 20:58:42,339 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:42,339 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:42,340 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:42,341 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:42,341 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:42] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 20:58:42,342 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:42] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 20:58:42,353 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:42,354 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:42,355 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:42] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 20:58:43,936 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:58:43,992 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:58:43,992 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:58:43,992 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 20:58:44,332 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 20:58:44,332 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:58:44] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 20:59:32,907 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:33,058 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:33,058 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:33,058 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 20:59:33,316 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,317 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,319 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,320 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,321 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,322 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,324 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 20:59:33,328 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:33] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 20:59:48,525 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:48,545 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:48,689 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:48,689 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:48,689 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:48,689 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:48,689 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 20:59:48,689 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.24
2024-11-25 20:59:48,764 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:48,827 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:48,827 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:48,827 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.25
2024-11-25 20:59:48,983 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:48,992 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:49,000 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:49,016 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,032 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,047 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,058 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,063 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 20:59:49,077 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=25 HTTP/1.1" 200 -
2024-11-25 20:59:49,077 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:49,077 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:49,079 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=24 HTTP/1.1" 200 -
2024-11-25 20:59:49,079 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:49,079 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:49,079 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.3
2024-11-25 20:59:49,079 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.26
2024-11-25 20:59:49,115 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:49,116 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:49,116 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.4
2024-11-25 20:59:49,175 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,199 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,213 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,216 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,230 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,231 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,347 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,356 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,357 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,361 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,362 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,363 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,365 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,375 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=40 HTTP/1.1" 200 -
2024-11-25 20:59:49,377 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,386 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=30 HTTP/1.1" 200 -
2024-11-25 20:59:49,387 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:49,400 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:49] "GET /api/graph/%20?min_score=26 HTTP/1.1" 200 -
2024-11-25 20:59:50,620 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:50,671 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:50,671 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:50,671 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.43
2024-11-25 20:59:50,687 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 20:59:50,766 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 20:59:50,766 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 20:59:50,767 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.44
2024-11-25 20:59:50,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,812 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:50] "GET /api/graph/%20?min_score=43 HTTP/1.1" 200 -
2024-11-25 20:59:50,861 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,863 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,864 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,865 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,866 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 20:59:50,871 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 20:59:50] "GET /api/graph/%20?min_score=44 HTTP/1.1" 200 -
2024-11-25 21:00:08,225 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:08,304 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:08,305 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:08,305 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.58
2024-11-25 21:00:08,399 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:08,401 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:08,404 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:08,407 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:08,410 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:08,418 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:08] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-25 21:00:20,143 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:20,223 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:20,223 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:20,223 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.91
2024-11-25 21:00:20,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:20,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:20,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:20,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:20,318 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:20,327 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:20] "GET /api/graph/%20?min_score=91 HTTP/1.1" 200 -
2024-11-25 21:00:27,421 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:27,477 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:27,483 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:27,483 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.12
2024-11-25 21:00:27,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:27,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:27,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:27,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:27,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:27,608 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:27] "GET /api/graph/%20?min_score=12 HTTP/1.1" 200 -
2024-11-25 21:00:35,705 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:35,848 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:35,848 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:35,858 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.13
2024-11-25 21:00:35,864 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:35,912 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:35,928 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:35,928 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:35,928 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.12
2024-11-25 21:00:35,959 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:35,974 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:35,974 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:35,974 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:35,974 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:35,983 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:35,983 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:35,983 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:35] "GET /api/graph/%20?min_score=13 HTTP/1.1" 200 -
2024-11-25 21:00:36,008 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:36,009 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:36,010 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.1
2024-11-25 21:00:36,037 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:36,044 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:36,048 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,051 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.02
2024-11-25 21:00:36,053 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,054 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,055 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,062 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:36] "GET /api/graph/%20?min_score=12 HTTP/1.1" 200 -
2024-11-25 21:00:36,073 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:36,074 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:36,074 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:00:36,124 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,127 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,127 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,128 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,137 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:36] "GET /api/graph/%20?min_score=10 HTTP/1.1" 200 -
2024-11-25 21:00:36,151 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,154 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,156 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,157 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,159 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,172 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:36] "GET /api/graph/%20?min_score=2 HTTP/1.1" 200 -
2024-11-25 21:00:36,217 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,219 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,221 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,222 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,224 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:00:36,233 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:36] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:00:51,174 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:00:51,281 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:00:51,281 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:00:51,281 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 21:00:51,389 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,389 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,389 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:00:51,392 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:00:51] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:01:16,445 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,514 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,562 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,610 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,610 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,610 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,610 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,610 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.03
2024-11-25 21:01:16,610 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.04
2024-11-25 21:01:16,610 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,642 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,642 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,642 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.22
2024-11-25 21:01:16,696 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,699 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:16,725 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,725 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,725 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.42
2024-11-25 21:01:16,755 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,756 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,759 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,760 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,761 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,762 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,763 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,765 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,766 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,767 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,768 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,769 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,770 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,771 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,774 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=3 HTTP/1.1" 200 -
2024-11-25 21:01:16,775 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,777 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,781 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=4 HTTP/1.1" 200 -
2024-11-25 21:01:16,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,812 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,818 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,819 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.37
2024-11-25 21:01:16,822 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,823 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,825 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,826 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,827 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,829 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,830 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,834 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=22 HTTP/1.1" 200 -
2024-11-25 21:01:16,844 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:16,845 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:16,845 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.33
2024-11-25 21:01:16,869 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,872 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,875 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,878 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,880 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,885 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,893 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=42 HTTP/1.1" 200 -
2024-11-25 21:01:16,913 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,917 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,935 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,938 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,943 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,945 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,948 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,950 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,961 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,964 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,973 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=33 HTTP/1.1" 200 -
2024-11-25 21:01:16,977 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,979 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,981 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,985 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,988 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:16,993 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:16] "GET /api/graph/T-012-24?min_score=37 HTTP/1.1" 200 -
2024-11-25 21:01:18,612 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:18,675 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:18,675 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:18,676 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.56
2024-11-25 21:01:18,759 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,772 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,773 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,775 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,776 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,777 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,778 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,779 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:18,782 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:18] "GET /api/graph/T-012-24?min_score=56 HTTP/1.1" 200 -
2024-11-25 21:01:18,887 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:18,887 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:18,920 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:18,944 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:18,966 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:18,967 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.51
2024-11-25 21:01:19,002 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:19,003 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:19,026 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:19,027 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:19,027 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:19,027 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:19,028 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.64
2024-11-25 21:01:19,029 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.73
2024-11-25 21:01:19,048 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,062 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,075 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,078 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,078 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,078 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:19] "GET /api/graph/T-012-24?min_score=51 HTTP/1.1" 200 -
2024-11-25 21:01:19,143 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:19,150 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,150 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:19,159 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:19,161 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,162 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:19,162 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.74
2024-11-25 21:01:19,165 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,165 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.72
2024-11-25 21:01:19,171 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,173 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,174 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,178 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,179 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,180 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,181 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,182 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,185 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:19] "GET /api/graph/T-012-24?min_score=73 HTTP/1.1" 200 -
2024-11-25 21:01:19,186 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,187 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,188 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,189 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,190 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,193 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:19] "GET /api/graph/T-012-24?min_score=64 HTTP/1.1" 200 -
2024-11-25 21:01:19,253 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,254 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,255 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,256 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,257 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,257 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,258 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,259 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,262 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:19] "GET /api/graph/T-012-24?min_score=74 HTTP/1.1" 200 -
2024-11-25 21:01:19,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,303 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,304 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,305 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,306 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,307 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,308 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,309 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:19,312 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:19] "GET /api/graph/T-012-24?min_score=72 HTTP/1.1" 200 -
2024-11-25 21:01:20,489 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:20,549 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:20,553 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:20,553 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.71
2024-11-25 21:01:20,640 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,640 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,664 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,671 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:20] "GET /api/graph/T-012-24?min_score=71 HTTP/1.1" 200 -
2024-11-25 21:01:20,677 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:20,746 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:20,788 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:20,790 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.7
2024-11-25 21:01:20,854 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,874 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,874 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,874 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,881 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,884 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,885 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:20,888 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:20] "GET /api/graph/T-012-24?min_score=70 HTTP/1.1" 200 -
2024-11-25 21:01:20,937 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:20,947 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:20,955 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:21,001 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:21,038 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:21,043 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:21,043 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.68
2024-11-25 21:01:21,066 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:21,066 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:21,068 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:21,069 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.69
2024-11-25 21:01:21,070 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:21,070 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.63
2024-11-25 21:01:21,096 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:21,097 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:21,097 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.58
2024-11-25 21:01:21,183 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,184 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,185 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,186 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,187 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,188 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,189 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,190 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,193 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:21] "GET /api/graph/T-012-24?min_score=68 HTTP/1.1" 200 -
2024-11-25 21:01:21,208 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,209 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,210 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,211 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,212 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,213 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,214 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,215 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,218 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:21] "GET /api/graph/T-012-24?min_score=69 HTTP/1.1" 200 -
2024-11-25 21:01:21,259 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,263 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,264 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,266 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,267 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,269 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,270 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,271 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,271 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,272 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,273 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,274 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,275 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,275 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:21,278 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:21] "GET /api/graph/T-012-24?min_score=63 HTTP/1.1" 200 -
2024-11-25 21:01:21,281 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:21] "GET /api/graph/T-012-24?min_score=58 HTTP/1.1" 200 -
2024-11-25 21:01:22,155 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:22,218 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:22,218 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:22,218 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.55
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,301 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,311 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:22] "GET /api/graph/T-012-24?min_score=55 HTTP/1.1" 200 -
2024-11-25 21:01:22,499 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:22,557 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:22,558 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:22,558 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.54
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:22,656 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:22] "GET /api/graph/T-012-24?min_score=54 HTTP/1.1" 200 -
2024-11-25 21:01:22,888 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:22,930 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:22,944 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:22,944 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:22,945 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.5
2024-11-25 21:01:22,953 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:22,953 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:23,000 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:23,000 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:23,000 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.51
2024-11-25 21:01:23,040 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:23,040 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:23,040 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.53
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,077 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:23] "GET /api/graph/T-012-24?min_score=50 HTTP/1.1" 200 -
2024-11-25 21:01:23,130 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,130 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:23,132 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,132 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:23,134 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,134 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.52
2024-11-25 21:01:23,136 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,137 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,138 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,140 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,143 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:23] "GET /api/graph/T-012-24?min_score=51 HTTP/1.1" 200 -
2024-11-25 21:01:23,152 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,153 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,154 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,155 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,156 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,157 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,159 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,162 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:23] "GET /api/graph/T-012-24?min_score=53 HTTP/1.1" 200 -
2024-11-25 21:01:23,198 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,199 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,200 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,201 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,203 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,205 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,206 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:23,209 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:23] "GET /api/graph/T-012-24?min_score=52 HTTP/1.1" 200 -
2024-11-25 21:01:35,652 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:35,782 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:35,782 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:35,782 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.61
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,862 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:35,877 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:35] "GET /api/graph/T-012-24?min_score=61 HTTP/1.1" 200 -
2024-11-25 21:01:49,239 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:01:49,381 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:01:49,381 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:01:49,381 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.01
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 646} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 298} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 14, column: 30, offset: 513} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 11, column: 25, offset: 402} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 13, column: 30, offset: 478} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 17, column: 29, offset: 610} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 333} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,461 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 222} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:01:49,477 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:01:49] "GET /api/graph/T-012-24?min_score=1 HTTP/1.1" 200 -
2024-11-25 21:02:04,341 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:02:04,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:02:04,515 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:02:04,515 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:02:04,515 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:02:04,515 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:02:04,515 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.01
2024-11-25 21:02:04,515 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:02:04,642 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,658 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 13, column: 29, offset: 436} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 8, column: 30, offset: 268} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 29, offset: 400} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 9, column: 30, offset: 303} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,671 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:02:04] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:02:04,671 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 6, column: 25, offset: 192} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) as total_nodes\n            '
2024-11-25 21:02:04,674 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:02:04] "GET /api/graph/%20?min_score=1 HTTP/1.1" 200 -
2024-11-25 21:25:25,193 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 21:25:25,194 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 21:25:25,845 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 21:25:29,373 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 21:25:29,380 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 21:25:29,480 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 21:25:31,089 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 21:25:31,206 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 21:25:31,229 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x00000179C238C320>
2024-11-25 21:25:31,813 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 21:25:31,883 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 21:25:31,884 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 21:25:31,895 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 21:25:31,899 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 21:25:40,385 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:40,834 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:40,835 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:40,836 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:25:40,844 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:40] "GET / HTTP/1.1" 200 -
2024-11-25 21:25:42,077 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:42,112 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:42,171 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:42,171 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:42,354 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:42,375 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:42,384 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:42] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:25:42,460 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:42,480 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:42,516 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:42] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:25:42,526 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:42,553 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:42,556 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:42,589 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:42,612 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:42,612 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:42,614 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:42] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:25:42,615 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:42,616 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:42] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:25:42,619 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:42] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 21:25:44,124 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:44,155 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:25:44,217 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:44,217 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:44,217 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:25:44,217 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:25:44,217 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:25:44,217 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:25:44,565 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:25:44,565 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:44] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:25:44,911 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 399} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,912 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 643} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,913 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 330} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,914 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 607} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,915 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 295} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,916 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 510} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,917 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 475} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,919 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 219} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:25:44,935 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:25:44] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:26:05,232 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:05,316 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:05,316 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:05,317 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:26:05,317 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:05] "GET / HTTP/1.1" 200 -
2024-11-25 21:26:06,567 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:06,631 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:06,631 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:06,632 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:06] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:26:06,848 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:06,911 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:06,911 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:06,911 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:06,913 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:06] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:26:06,939 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:06,948 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:07,002 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:07,004 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:07,005 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:07] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 21:26:07,006 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:07,007 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:07,009 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:07] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:26:07,039 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:07,039 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:07,041 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:07] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:26:08,500 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:08,554 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:08,554 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:08,554 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:26:08,586 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:08,659 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:08,659 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:08,659 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:26:08,746 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 399} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,746 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 643} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,760 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 330} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,760 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 607} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,760 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 295} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,764 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 510} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,764 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 475} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,764 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 219} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:26:08,776 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:08] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:26:09,016 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:26:09,029 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:09] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:26:28,218 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:28,441 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:28,441 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:28,441 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 21:26:28,639 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,664 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:28,666 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:28] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:28,795 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:28,921 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:28,921 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:28,921 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 21:26:29,108 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,111 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:29] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:29,257 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:29,312 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:29,312 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:29,312 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 21:26:29,392 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,394 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,396 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,397 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,397 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,400 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,401 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,402 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,403 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:29] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:29,500 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:29,563 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:29,563 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:29,563 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 21:26:29,612 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:29,630 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,630 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,636 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,638 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,640 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,642 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,644 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,646 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,648 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:29] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:29,675 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:29,675 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:29,676 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 21:26:29,734 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,734 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,734 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,734 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,734 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,748 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,750 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,750 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:29,750 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:29] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:30,832 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:30,896 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:30,896 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:30,905 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 21:26:31,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,088 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,088 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,088 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,088 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,093 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,093 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,093 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:31,093 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:31] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:31,160 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:31,160 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:31,160 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 21:26:31,226 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,227 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,228 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,229 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,230 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,231 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,232 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,236 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:31] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:26:31,393 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:31,456 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:31,456 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:31,456 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 21:26:31,534 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,537 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,547 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,550 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,555 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,570 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,573 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:31,595 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:31] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:26:42,626 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:42,715 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:42,715 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:42,716 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.3
2024-11-25 21:26:42,808 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,809 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,810 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,811 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,812 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,814 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,816 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:42,818 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:42] "GET /api/graph/T-012-24?min_score=30 HTTP/1.1" 200 -
2024-11-25 21:26:57,545 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:26:57,733 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:26:57,733 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:26:57,733 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.56
2024-11-25 21:26:57,830 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,832 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,834 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,835 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,836 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,837 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,838 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,839 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:26:57,844 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:26:57] "GET /api/graph/T-012-24?min_score=56 HTTP/1.1" 200 -
2024-11-25 21:27:06,443 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:06,506 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:06,506 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:06,506 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.87
2024-11-25 21:27:06,601 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:06,608 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:06] "GET /api/graph/T-012-24?min_score=87 HTTP/1.1" 200 -
2024-11-25 21:27:19,130 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:19,378 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:19,378 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:19,379 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.88
2024-11-25 21:27:19,380 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:19,414 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:19,429 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:19,500 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:19,500 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:19,500 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.86
2024-11-25 21:27:19,528 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:19,528 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:19,528 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.53
2024-11-25 21:27:19,592 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,595 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,596 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,597 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,599 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,600 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,603 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:19] "GET /api/graph/T-012-24?min_score=88 HTTP/1.1" 200 -
2024-11-25 21:27:19,621 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,627 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,629 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,630 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,631 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,632 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,634 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,635 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,640 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:19] "GET /api/graph/T-012-24?min_score=86 HTTP/1.1" 200 -
2024-11-25 21:27:19,680 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:19,681 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:19,681 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 21:27:19,751 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,792 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,794 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,808 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,810 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,814 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,821 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,824 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,916 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,918 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,921 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,923 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,932 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,934 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,938 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:19] "GET /api/graph/T-012-24?min_score=53 HTTP/1.1" 200 -
2024-11-25 21:27:19,942 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:27:19,946 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:19] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:27:26,447 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:27:26,511 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:27:26,511 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:27:26,512 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:27:26,669 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 399} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,670 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 643} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,672 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 330} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,674 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 607} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,675 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 295} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,676 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 510} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,677 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 475} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,678 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 219} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:27:26,692 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:27:26] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:28:51,050 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:28:51,130 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:28:51,130 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:28:51,131 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para:   con similitud m√≠nima de 0.27
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 399} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 643} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 330} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 607} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 295} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 510} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,265 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 475} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,280 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 219} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:51,296 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:28:51] "GET /api/graph/%20?min_score=27 HTTP/1.1" 200 -
2024-11-25 21:28:53,260 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:28:53,337 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:28:53,370 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:28:53,371 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:28:53] "[33mGET /api/graph/@similitudes_bp.route('/api/graph/<providencia>')%20def%20get_graph(providencia):%20%20%20%20%20"""Endpoint%20para%20obtener%20datos%20del%20grafo."""%20%20%20%20%20try:%20%20%20%20%20%20%20%20%20driver%20=%20current_app.config.get('NEO4J_DRIVER')%20%20%20%20%20%20%20%20%20if%20not%20driver:%20%20%20%20%20%20%20%20%20%20%20%20%20return%20jsonify(format_response("Neo4j%20no%20disponible",%20False)),%20503%20%20%20%20%20%20%20%20%20%20 HTTP/1.1[0m" 404 -
2024-11-25 21:28:54,728 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:28:54,809 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:28:54,836 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:28:54,837 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para:   con similitud m√≠nima de 0.27
2024-11-25 21:28:54,992 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 399} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:54,999 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 643} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,001 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 330} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,006 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 607} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,008 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 295} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,012 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 510} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,019 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 475} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,022 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 219} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations,\n                count(distinct p1) + count(distinct p2) as total_nodes\n            '
2024-11-25 21:28:55,055 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:28:55] "GET /api/graph/%20?min_score=27 HTTP/1.1" 200 -
2024-11-25 21:29:09,415 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:09,474 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:09,578 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:09,578 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:09,578 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T0 con similitud m√≠nima de 0.27
2024-11-25 21:29:09,578 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:09,578 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:09,578 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T con similitud m√≠nima de 0.27
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,689 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,689 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,689 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:09] "[33mGET /api/graph/T0?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:09,784 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,784 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,784 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,784 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,802 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:09,802 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:09] "[33mGET /api/graph/T?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:10,031 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:10,095 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:10,095 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:10,095 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T0- con similitud m√≠nima de 0.27
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,169 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,169 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:10,170 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:10] "[33mGET /api/graph/T0-?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:11,126 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:11,202 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:11,202 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:11,202 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T0 con similitud m√≠nima de 0.27
2024-11-25 21:29:11,267 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,284 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,292 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,297 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,299 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,303 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,306 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:11,319 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:11] "[33mGET /api/graph/T0?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:11,924 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:11,986 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:11,987 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:11,987 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T con similitud m√≠nima de 0.27
2024-11-25 21:29:12,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,056 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,063 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:12] "[33mGET /api/graph/T?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:12,547 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:12,621 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:12,621 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:12,622 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T- con similitud m√≠nima de 0.27
2024-11-25 21:29:12,687 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,687 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,703 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,703 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,718 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,718 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,718 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,718 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,718 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:12] "[33mGET /api/graph/T-?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:12,770 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:12,846 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:12,846 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:12,846 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-0 con similitud m√≠nima de 0.27
2024-11-25 21:29:12,920 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,920 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:12,926 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:12] "[33mGET /api/graph/T-0?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:13,330 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:13,393 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:13,393 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:13,393 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-01 con similitud m√≠nima de 0.27
2024-11-25 21:29:13,393 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,472 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,483 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:13] "[33mGET /api/graph/T-01?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:13,492 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:13,492 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:13,492 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012 con similitud m√≠nima de 0.27
2024-11-25 21:29:13,576 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,576 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,584 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:13] "[33mGET /api/graph/T-012?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:13,714 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:13,770 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:13,770 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:13,781 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012- con similitud m√≠nima de 0.27
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:13,845 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:13] "[33mGET /api/graph/T-012-?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:13,909 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:13,980 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:13,980 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:13,983 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.27
2024-11-25 21:29:14,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,052 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,058 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:14] "[33mGET /api/graph/T-012-2?min_score=27 HTTP/1.1[0m" 404 -
2024-11-25 21:29:14,295 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:14,358 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:14,358 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:14,360 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.27
2024-11-25 21:29:14,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,454 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:14,456 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:14] "GET /api/graph/T-012-24?min_score=27 HTTP/1.1" 200 -
2024-11-25 21:29:22,372 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:29:22,521 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:29:22,521 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:29:22,521 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.38
2024-11-25 21:29:22,610 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 325} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,610 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 540} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,610 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 673} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,610 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 429} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,610 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 637} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,625 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 360} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,625 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 505} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,625 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 249} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm\n                }) as relationships,\n                count(r) as total_relations\n            '
2024-11-25 21:29:22,625 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:29:22] "GET /api/graph/T-012-24?min_score=38 HTTP/1.1" 200 -
2024-11-25 21:35:40,477 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 21:35:40,478 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 21:35:40,988 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 21:35:44,909 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 21:35:44,911 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 21:35:45,169 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 21:35:46,768 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 21:35:46,885 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 21:35:46,887 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x0000029611FB0590>
2024-11-25 21:35:47,652 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 21:35:47,730 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 21:35:47,792 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 21:35:47,804 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 21:35:47,810 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 21:35:53,395 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:53,814 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:53,815 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:53,815 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:35:53,823 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:53] "GET / HTTP/1.1" 200 -
2024-11-25 21:35:55,078 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:55,106 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:55,138 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:55,138 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:55,169 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:55,169 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:55,296 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:55] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:35:55,334 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:55] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:35:55,429 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:55,489 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:55,494 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:55,495 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:55] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:35:55,543 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:55,562 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:55,631 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:55,631 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:55,633 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:55] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 21:35:55,809 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:55,809 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:55,810 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:55] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:35:57,483 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:57,493 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:35:57,658 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:57,658 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:35:57,658 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:57,658 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:35:57,658 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:35:57,658 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:35:57,953 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,953 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,953 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,962 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,963 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,963 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,963 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,963 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:35:57,969 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:57] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:35:58,015 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:35:58,028 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:35:58] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:36:29,931 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:30,306 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:30,390 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:30,391 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:36:30,392 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:30] "GET / HTTP/1.1" 200 -
2024-11-25 21:36:31,757 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:31,816 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:31,816 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:31,817 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:31] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:36:32,044 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:32,076 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:32,090 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:32,102 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:32,103 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:32,104 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:32] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:36:32,108 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:32,165 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:32,166 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:32,169 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:32] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 21:36:32,195 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:32,196 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:32,196 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:32,196 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:32,199 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:32] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:36:32,199 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:32] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:36:33,754 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:33,774 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:36:33,843 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:33,843 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:36:33,843 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:33,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:36:33,844 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:36:33,845 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:36:34,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,064 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,065 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,067 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,068 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,070 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,071 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:36:34,087 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:34] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:36:34,202 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:36:34,203 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:36:34] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:37:08,356 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,474 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:08,474 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:08,475 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.01
2024-11-25 21:37:08,612 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,612 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,614 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,615 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,616 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,617 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,618 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,619 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,620 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,633 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:08] "GET /api/graph/%20?min_score=1 HTTP/1.1" 200 -
2024-11-25 21:37:08,635 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,658 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,671 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:08,672 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:08,673 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.07
2024-11-25 21:37:08,729 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,736 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:08,741 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:08,742 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:08,742 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.02
2024-11-25 21:37:08,775 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,794 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,794 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,796 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,799 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,801 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,803 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:08,815 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:08,815 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.05
2024-11-25 21:37:08,825 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:08] "GET /api/graph/%20?min_score=7 HTTP/1.1" 200 -
2024-11-25 21:37:08,872 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:08,873 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:08,874 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.11
2024-11-25 21:37:08,938 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,945 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,948 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,949 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,950 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,952 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,952 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,952 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:08,976 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:08] "GET /api/graph/%20?min_score=5 HTTP/1.1" 200 -
2024-11-25 21:37:09,015 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,046 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,067 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,067 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,070 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,073 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,074 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,075 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:09,199 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:09] "GET /api/graph/%20?min_score=2 HTTP/1.1" 200 -
2024-11-25 21:37:09,254 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:09] "GET /api/graph/%20?min_score=11 HTTP/1.1" 200 -
2024-11-25 21:37:09,271 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:09,666 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:09,803 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.1
2024-11-25 21:37:10,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,131 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,135 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:10,233 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:10] "GET /api/graph/%20?min_score=10 HTTP/1.1" 200 -
2024-11-25 21:37:11,076 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:11,137 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:11,137 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:11,138 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.15
2024-11-25 21:37:11,220 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:11,246 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:11,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,294 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,296 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,312 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:11,312 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:11,319 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,319 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:11,320 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:11,320 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.16
2024-11-25 21:37:11,321 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.17
2024-11-25 21:37:11,325 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,341 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,342 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,349 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,375 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:11] "GET /api/graph/%20?min_score=15 HTTP/1.1" 200 -
2024-11-25 21:37:11,449 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,452 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:11,474 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,479 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,481 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,542 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,542 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:11] "GET /api/graph/%20?min_score=17 HTTP/1.1" 200 -
2024-11-25 21:37:11,553 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:11,554 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,609 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:11,772 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:11,821 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:11,919 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:12,045 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:12,053 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,102 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,103 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,103 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,104 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.19
2024-11-25 21:37:12,158 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,158 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.2
2024-11-25 21:37:12,239 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:12] "GET /api/graph/%20?min_score=16 HTTP/1.1" 200 -
2024-11-25 21:37:12,333 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,338 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,340 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,345 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,346 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,352 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,354 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,380 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:12] "GET /api/graph/%20?min_score=19 HTTP/1.1" 200 -
2024-11-25 21:37:12,409 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,416 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,428 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,430 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,432 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,433 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,437 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,439 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:12,467 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:12] "GET /api/graph/%20?min_score=20 HTTP/1.1" 200 -
2024-11-25 21:37:35,090 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:35,161 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:35,162 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:35,162 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.58
2024-11-25 21:37:35,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,303 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,304 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,305 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,306 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,307 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,307 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,308 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:35,319 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:35] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-25 21:37:56,241 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,314 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,315 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,315 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.55
2024-11-25 21:37:56,452 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,453 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,470 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:56] "GET /api/graph/%20?min_score=55 HTTP/1.1" 200 -
2024-11-25 21:37:56,486 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,512 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,517 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,521 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.54
2024-11-25 21:37:56,523 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,547 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,643 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:56,644 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,644 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,662 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,667 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,668 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,668 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.52
2024-11-25 21:37:56,669 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.42
2024-11-25 21:37:56,670 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,744 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,745 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,745 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,746 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.33
2024-11-25 21:37:56,747 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,748 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,748 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,749 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,796 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:56] "GET /api/graph/%20?min_score=54 HTTP/1.1" 200 -
2024-11-25 21:37:56,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,874 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:56,890 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,890 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:56,890 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.48
2024-11-25 21:37:56,928 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,956 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,986 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,986 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:56,986 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,042 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,074 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,097 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,099 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,205 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:57] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-25 21:37:57,410 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,505 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,508 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,512 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,776 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:57] "GET /api/graph/%20?min_score=48 HTTP/1.1" 200 -
2024-11-25 21:37:57,780 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,786 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,788 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,792 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,796 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:57] "GET /api/graph/%20?min_score=42 HTTP/1.1" 200 -
2024-11-25 21:37:57,835 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,840 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,842 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,846 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,848 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:57,872 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:57] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-25 21:37:58,635 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:58,694 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:58,754 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:58,755 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.27
2024-11-25 21:37:58,911 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,926 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,928 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,932 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,934 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,938 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,940 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,944 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:58,984 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:58] "GET /api/graph/%20?min_score=27 HTTP/1.1" 200 -
2024-11-25 21:37:59,193 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:59,265 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:59,265 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:59,316 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:59,317 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.19
2024-11-25 21:37:59,373 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:59,386 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:37:59,415 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:59,416 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.1
2024-11-25 21:37:59,463 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,495 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,499 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,504 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,507 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,515 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,522 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:37:59,527 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,527 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:37:59,528 - routes.similitudes - INFO - [similitudes.py:86] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:37:59,534 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,561 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:59] "GET /api/graph/%20?min_score=19 HTTP/1.1" 200 -
2024-11-25 21:37:59,589 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,601 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,603 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,604 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,605 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,606 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,609 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,652 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 339} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,669 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:59] "GET /api/graph/%20?min_score=10 HTTP/1.1" 200 -
2024-11-25 21:37:59,671 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 408} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 616} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,674 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 519} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,675 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 662} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,676 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 228} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,677 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 484} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,678 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 304} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(startNode(r)),\n                    target: id(endNode(r)),\n                    score: r.index_simm\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:37:59,706 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:37:59] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:43:06,171 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 21:43:06,173 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 21:43:06,477 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 21:43:09,625 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 21:43:09,654 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 21:43:09,745 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 21:43:11,348 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 21:43:11,464 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 21:43:11,466 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000002F4EC6E5520>
2024-11-25 21:43:12,046 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 21:43:12,110 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 21:43:12,117 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 21:43:12,127 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 21:43:12,132 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 21:43:14,154 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:14,583 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:14,591 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:14,599 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:43:14,611 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:14] "GET / HTTP/1.1" 200 -
2024-11-25 21:43:16,059 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:16,075 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:16,174 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:16,174 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:16,348 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:16,348 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:16,455 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:16] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:43:16,501 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:16] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:43:16,536 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:16,596 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:16,596 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:16,597 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:16] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:43:18,008 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:18,024 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:18,093 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:18,093 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:18,095 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:18] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:43:18,096 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:18,097 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:18,098 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:18] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 21:43:19,766 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:19,781 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:43:19,861 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:19,861 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:19,861 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:43:19,861 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:43:19,861 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:43:19,861 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,110 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:43:20,126 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:20] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:43:20,227 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:43:20,228 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:43:20] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:51:01,336 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:01,349 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:05,103 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:20,640 - neo4j.io - ERROR - [_bolt.py:1037] - [#E241]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 21:51:20,642 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 21:51:20,642 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 21:51:20,643 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 21:51:20,643 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 21:51:20,645 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:20] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:51:21,129 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:21,130 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:21,131 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:21] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:51:21,147 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:21,147 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:21,148 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:51:21,149 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:21] "GET / HTTP/1.1" 200 -
2024-11-25 21:51:22,748 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:22,764 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:22,794 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:22,816 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:22,816 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:22,832 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:22,833 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:22,833 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:22,835 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:22] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 21:51:22,836 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:22,837 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:22] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:51:22,889 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:22,890 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:22,891 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:22] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:51:22,915 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:22,915 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:22,917 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:22] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:51:23,036 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:23,036 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:23,037 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:23] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:51:24,436 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:24,499 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:24,499 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:24,499 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:51:24,640 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:24,701 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:24,704 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:24,704 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:51:24,847 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:51:24,847 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:24] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:51:24,921 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,927 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,928 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,930 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,931 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,932 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,933 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,934 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:24,947 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:24] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:51:38,139 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:38,201 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:38,201 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:38,201 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.18
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:38,359 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:38] "GET /api/graph/%20?min_score=18 HTTP/1.1" 200 -
2024-11-25 21:51:43,190 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:43,247 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:43,247 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:43,248 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.14
2024-11-25 21:51:43,355 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:43,380 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,382 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,383 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,384 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,385 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,386 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,387 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,388 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,404 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:43] "GET /api/graph/%20?min_score=14 HTTP/1.1" 200 -
2024-11-25 21:51:43,405 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:51:43,410 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:43,411 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:43,412 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.13
2024-11-25 21:51:43,465 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:51:43,466 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:51:43,466 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:51:43,577 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,579 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,583 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,583 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,585 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,586 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,587 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,587 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,588 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,590 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,591 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,592 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,595 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,596 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:51:43,635 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:43] "GET /api/graph/%20?min_score=13 HTTP/1.1" 200 -
2024-11-25 21:51:43,637 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:51:43] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:52:22,034 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:22,129 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:22,129 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:22,129 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:52:22,129 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:22] "GET / HTTP/1.1" 200 -
2024-11-25 21:52:23,358 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:23,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:23,415 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:23,415 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:23,415 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:23] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:52:23,451 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:23,451 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:23,451 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:23] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:52:23,686 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:23,733 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:23,748 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:23,748 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:23,748 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:23] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:52:23,748 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:23,812 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:23,812 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:23,812 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:23,812 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:23,812 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:23] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:52:23,812 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:23] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 21:52:25,332 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:25,344 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:52:25,420 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:25,420 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:25,420 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:52:25,420 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:52:25,424 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:52:25,424 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:52:25,555 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,555 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,567 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:52:25,583 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:25] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:52:25,773 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:52:25,775 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:52:25] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:55:36,501 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:36,588 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:36,589 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:36,589 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 21:55:36,590 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:36] "GET / HTTP/1.1" 200 -
2024-11-25 21:55:37,821 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:37,855 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:37,878 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:37,884 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:37,887 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:37] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 21:55:37,911 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:37,912 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:37,913 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:37] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 21:55:38,182 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:38,212 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:38,238 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:38,295 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:38,296 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:38,296 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:38,297 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:38,298 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:38,298 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:38,301 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:38] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 21:55:38,301 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:38] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 21:55:38,301 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:38] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 21:55:39,809 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:39,858 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:55:39,873 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:39,873 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:39,873 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 21:55:39,920 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:55:39,920 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:55:39,920 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:55:40,067 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,068 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,069 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,070 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,071 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,072 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,073 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,073 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:55:40,078 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:40] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:55:40,231 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 21:55:40,232 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:55:40] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 21:56:06,483 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:06,612 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:06,612 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:06,613 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: t con similitud m√≠nima de 0.0
2024-11-25 21:56:06,765 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,765 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:06,781 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:06] "[33mGET /api/graph/t?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:07,569 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:07,626 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:07,626 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:07,626 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 21:56:07,782 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,798 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,806 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,808 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,809 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,810 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,811 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,812 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:07,823 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:07] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:56:08,185 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:08,249 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:08,265 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:08,265 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,353 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,355 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:08,358 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:08] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:08,756 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:08,858 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:08,887 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:08,888 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 21:56:08,906 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:09,008 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:09,037 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,056 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:09,097 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,100 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,104 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,120 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,124 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,127 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,129 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:09] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:09,131 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 21:56:09,312 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,343 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:09,343 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:09] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:09,407 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:09,536 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:09,536 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,593 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,609 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:09] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:09,641 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:09,702 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:09,716 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:09,716 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 21:56:09,776 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,778 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,779 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,784 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,787 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,789 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,790 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:09,793 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:09] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:10,327 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:10,400 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:10,401 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:10,401 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 21:56:10,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,452 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:10,468 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,468 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,473 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,473 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:10] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:10,526 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:10,527 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:10,528 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 21:56:10,586 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,672 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,836 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:10,934 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,014 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,093 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,193 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:11,225 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,233 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,233 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:11] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 21:56:11,290 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:11,290 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:11,291 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,373 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,389 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,394 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:11,394 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:11] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 21:56:30,008 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,013 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,045 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,122 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,123 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,123 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.02
2024-11-25 21:56:30,145 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,145 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,145 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,145 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,145 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.03
2024-11-25 21:56:30,145 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.04
2024-11-25 21:56:30,246 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,252 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,264 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,264 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,264 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,268 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,283 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,283 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,283 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,299 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,299 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,299 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,327 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,330 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,331 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.05
2024-11-25 21:56:30,331 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:30] "GET /api/graph/T-012-24?min_score=2 HTTP/1.1" 200 -
2024-11-25 21:56:30,331 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:30] "GET /api/graph/T-012-24?min_score=4 HTTP/1.1" 200 -
2024-11-25 21:56:30,348 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,353 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:30] "GET /api/graph/T-012-24?min_score=3 HTTP/1.1" 200 -
2024-11-25 21:56:30,505 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,507 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,508 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,510 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,511 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,512 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,513 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,519 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:30] "GET /api/graph/T-012-24?min_score=5 HTTP/1.1" 200 -
2024-11-25 21:56:30,533 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,589 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,617 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:30,636 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,638 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.06
2024-11-25 21:56:30,692 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:30,695 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:30,695 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.07
2024-11-25 21:56:30,774 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,779 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:30,880 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,246 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,274 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,276 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,278 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,280 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,281 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,282 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,283 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,284 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,286 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,289 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,291 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,292 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:31,299 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:31] "GET /api/graph/T-012-24?min_score=6 HTTP/1.1" 200 -
2024-11-25 21:56:31,307 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:31] "GET /api/graph/T-012-24?min_score=7 HTTP/1.1" 200 -
2024-11-25 21:56:32,069 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:32,125 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:32,125 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:32,125 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.08
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,220 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,220 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:32,220 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:32] "GET /api/graph/T-012-24?min_score=8 HTTP/1.1" 200 -
2024-11-25 21:56:32,813 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:32,877 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:32,877 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:32,877 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.12
2024-11-25 21:56:32,893 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:32,893 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:32,987 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:32,987 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:32,987 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:32,987 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:32,987 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.09
2024-11-25 21:56:32,987 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.1
2024-11-25 21:56:33,020 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,022 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,023 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,024 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,025 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,026 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,027 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,028 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,031 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:33] "GET /api/graph/T-012-24?min_score=12 HTTP/1.1" 200 -
2024-11-25 21:56:33,054 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:33,088 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,112 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,127 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:33,129 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,130 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,130 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:33,131 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,132 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,132 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.13
2024-11-25 21:56:33,133 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,134 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,135 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,136 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,137 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,140 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,141 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,142 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,143 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,146 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:33] "GET /api/graph/T-012-24?min_score=9 HTTP/1.1" 200 -
2024-11-25 21:56:33,149 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:33] "GET /api/graph/T-012-24?min_score=10 HTTP/1.1" 200 -
2024-11-25 21:56:33,197 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,199 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,200 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,200 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,203 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,205 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,206 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:33,209 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:33] "GET /api/graph/T-012-24?min_score=13 HTTP/1.1" 200 -
2024-11-25 21:56:51,063 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,081 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,132 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,235 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,235 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,235 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,235 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,235 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.15
2024-11-25 21:56:51,235 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,251 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,251 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.16
2024-11-25 21:56:51,251 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,251 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.14
2024-11-25 21:56:51,330 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,330 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,330 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.17
2024-11-25 21:56:51,385 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,415 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,416 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,417 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,418 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,419 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,422 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,423 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,423 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,426 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:51] "GET /api/graph/T-012-24?min_score=15 HTTP/1.1" 200 -
2024-11-25 21:56:51,459 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,463 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,471 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,472 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,479 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,480 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,481 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,484 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,484 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:51,485 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,486 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,487 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,488 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,489 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,490 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,494 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:51] "GET /api/graph/T-012-24?min_score=14 HTTP/1.1" 200 -
2024-11-25 21:56:51,495 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,497 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,500 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:51] "GET /api/graph/T-012-24?min_score=17 HTTP/1.1" 200 -
2024-11-25 21:56:51,545 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,546 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,547 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.19
2024-11-25 21:56:51,612 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,645 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:51,659 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,709 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,710 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,713 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,719 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,722 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,724 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,726 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,731 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:51] "GET /api/graph/T-012-24?min_score=19 HTTP/1.1" 200 -
2024-11-25 21:56:51,734 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:51,735 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.18
2024-11-25 21:56:51,743 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,745 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,747 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,749 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,751 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,754 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,756 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,760 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:51] "GET /api/graph/T-012-24?min_score=16 HTTP/1.1" 200 -
2024-11-25 21:56:51,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,843 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,845 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,848 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,896 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,903 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:51,909 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:52,092 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:52,209 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:52] "GET /api/graph/T-012-24?min_score=18 HTTP/1.1" 200 -
2024-11-25 21:56:53,983 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:53,990 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:54,022 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:54,038 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:54,069 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,069 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,069 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.21
2024-11-25 21:56:54,085 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,085 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,085 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.2
2024-11-25 21:56:54,123 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,123 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,123 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,123 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,123 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.22
2024-11-25 21:56:54,123 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.23
2024-11-25 21:56:54,202 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,202 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,210 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,210 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,213 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,224 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,224 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,224 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,233 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:54] "GET /api/graph/T-012-24?min_score=21 HTTP/1.1" 200 -
2024-11-25 21:56:54,245 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,245 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,245 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,246 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,248 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,294 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,330 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,359 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:54,408 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,409 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,415 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:54] "GET /api/graph/T-012-24?min_score=23 HTTP/1.1" 200 -
2024-11-25 21:56:54,416 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,467 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:54,473 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,476 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,478 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,479 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,480 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,485 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:54] "GET /api/graph/T-012-24?min_score=22 HTTP/1.1" 200 -
2024-11-25 21:56:54,491 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:54] "GET /api/graph/T-012-24?min_score=20 HTTP/1.1" 200 -
2024-11-25 21:56:54,497 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,497 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,498 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.24
2024-11-25 21:56:54,565 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:54,667 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:54,673 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,756 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.25
2024-11-25 21:56:54,759 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,760 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,761 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,762 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,763 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,763 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,777 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:54,780 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:54] "GET /api/graph/T-012-24?min_score=24 HTTP/1.1" 200 -
2024-11-25 21:56:54,820 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,019 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,020 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,022 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,023 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,024 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,025 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,026 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:55,030 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:55] "GET /api/graph/T-012-24?min_score=25 HTTP/1.1" 200 -
2024-11-25 21:56:56,740 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:56:56,798 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:56:56,799 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:56:56,799 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.26
2024-11-25 21:56:56,884 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,886 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,887 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,888 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,890 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,891 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:56:56,894 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:56:56] "GET /api/graph/T-012-24?min_score=26 HTTP/1.1" 200 -
2024-11-25 21:57:12,908 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 21:57:12,984 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 21:57:12,984 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 21:57:12,984 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.43
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,063 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,077 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,079 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 21:57:13,079 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 21:57:13] "GET /api/graph/T-012-24?min_score=43 HTTP/1.1" 200 -
2024-11-25 22:03:17,097 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:36,561 - neo4j.io - ERROR - [_bolt.py:1037] - [#E3C5]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 22:03:36,564 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 22:03:36,564 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 22:03:36,565 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 22:03:36,565 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 22:03:36,565 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 22:03:36,566 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:36] "GET / HTTP/1.1" 200 -
2024-11-25 22:03:38,100 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:38,121 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:38,127 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:38,143 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:38,217 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:38,751 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:38,752 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:38,752 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:38,752 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:38,752 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:38,753 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:38,753 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:38,754 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:38,754 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:38,754 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:38,755 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:38] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 22:03:38,757 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:38] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 22:03:38,758 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:38] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 22:03:38,759 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:38] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 22:03:38,759 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:38] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 22:03:40,438 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:40,452 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:03:40,518 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:40,518 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:03:40,518 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:40,518 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:03:40,518 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 22:03:40,518 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 22:03:40,682 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,683 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,685 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,686 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,687 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,688 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,690 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,691 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:03:40,703 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:40] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:03:40,884 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 22:03:40,891 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:03:40] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 22:04:12,099 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:12,249 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:12,249 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:12,250 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 22:04:12,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,328 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,343 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,343 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:12] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:12,659 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:12,721 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:12,724 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:12,724 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 22:04:12,801 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,809 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,809 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,810 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,811 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,815 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:12,816 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:12] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:13,018 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:13,078 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:13,078 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:13,078 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 22:04:13,141 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,147 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:13] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:13,320 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:13,387 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:13,387 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:13,388 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 22:04:13,450 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,452 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:13] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:13,531 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:13,595 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:13,595 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:13,596 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 22:04:13,658 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,660 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,660 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,661 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,662 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,664 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,665 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,666 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,668 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:13] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:13,702 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:13,765 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:13,765 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:13,765 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 22:04:13,829 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,830 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,831 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,832 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,833 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,834 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,836 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,837 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:13,838 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:13] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:14,111 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:14,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:14,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:14,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 22:04:14,239 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,295 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,295 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,302 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,311 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:14] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:04:14,383 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:14,449 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:14,449 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:14,450 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 22:04:14,519 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,525 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,526 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,527 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,528 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,529 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,530 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,531 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:14,535 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:14] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:04:24,562 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:24,726 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:24,726 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:24,726 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.29
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,817 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,826 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:24,826 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:24] "GET /api/graph/T-012-24?min_score=29 HTTP/1.1" 200 -
2024-11-25 22:04:29,170 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:29,233 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:29,233 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:29,233 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.45
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,329 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,336 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,336 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:29,339 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:29] "GET /api/graph/T-012-24?min_score=45 HTTP/1.1" 200 -
2024-11-25 22:04:32,421 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:04:32,485 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:04:32,485 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:04:32,485 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.67
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,580 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:04:32,595 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:04:32] "GET /api/graph/T-012-24?min_score=67 HTTP/1.1" 200 -
2024-11-25 22:05:05,514 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:05,639 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:05,639 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:05,639 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 22:05:05,639 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:05] "GET / HTTP/1.1" 200 -
2024-11-25 22:05:06,936 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:06,998 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:06,998 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:06,998 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:06] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 22:05:07,188 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:07,196 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:07,282 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:07,282 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:07,283 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:07,283 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:07,285 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:07] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 22:05:07,285 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:07] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 22:05:07,292 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:07,314 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:07,353 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:07,354 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:07,356 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:07] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 22:05:07,385 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:07,385 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:07,387 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:07] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 22:05:08,859 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:08,907 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:08,934 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:08,934 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:08,934 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 22:05:09,003 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:09,004 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:09,004 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 22:05:09,079 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,079 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,079 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,079 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,089 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,089 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,089 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,089 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:09,095 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:09] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:05:09,356 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 22:05:09,377 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:09] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 22:05:16,291 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:16,469 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:16,472 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:16,474 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 22:05:16,540 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,543 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,550 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,552 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,555 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,557 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,560 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,564 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:16,566 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:16] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:16,917 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:17,008 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:17,076 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:17,076 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 22:05:17,139 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,170 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,186 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,186 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:17] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:17,483 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:17,553 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:17,553 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:17,553 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 22:05:17,672 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,695 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,697 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,700 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,702 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,717 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,720 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,722 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:17,726 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:17] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:17,937 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:18,032 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:18,032 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:18,032 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 22:05:18,095 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,111 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,127 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,127 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,127 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:18] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:18,343 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:18,464 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:18,484 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:18,517 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 22:05:18,517 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:18,601 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,631 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,633 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,634 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:18,636 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,637 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:18,637 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 22:05:18,643 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,646 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,648 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,650 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,653 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:18] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:18,702 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,718 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,720 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,723 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,725 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,728 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,730 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,732 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,733 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:18] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:18,828 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:18,844 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:18,920 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:18,920 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:18,920 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 22:05:18,950 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:18,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:18,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 22:05:18,990 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,993 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,996 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:18,999 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,001 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,004 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,007 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,009 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,014 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:19] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:05:19,017 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,033 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,036 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,038 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,041 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,043 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,050 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,053 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:19,055 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:19] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:05:30,896 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:30,908 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:30,914 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:30,942 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:30,952 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:30,968 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,175 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.03
2024-11-25 22:05:31,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.01
2024-11-25 22:05:31,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.04
2024-11-25 22:05:31,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.06
2024-11-25 22:05:31,175 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.02
2024-11-25 22:05:31,375 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:31,375 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:31,375 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.07
2024-11-25 22:05:31,414 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,414 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,418 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,420 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:31] "GET /api/graph/T-012-24?min_score=2 HTTP/1.1" 200 -
2024-11-25 22:05:31,430 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,430 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,430 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,430 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,459 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,472 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,506 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,513 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,514 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,518 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,522 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,527 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,528 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,531 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:31] "GET /api/graph/T-012-24?min_score=6 HTTP/1.1" 200 -
2024-11-25 22:05:31,534 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,536 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,538 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,588 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,589 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,637 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,642 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,712 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,713 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,715 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,721 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,766 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,767 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,830 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,831 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,833 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,834 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,938 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,940 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,942 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,943 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,947 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:31] "GET /api/graph/T-012-24?min_score=4 HTTP/1.1" 200 -
2024-11-25 22:05:31,952 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:31] "GET /api/graph/T-012-24?min_score=1 HTTP/1.1" 200 -
2024-11-25 22:05:31,991 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:31,993 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:32,066 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:32,119 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:32,121 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:32,203 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:32] "GET /api/graph/T-012-24?min_score=7 HTTP/1.1" 200 -
2024-11-25 22:05:32,220 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:32] "GET /api/graph/T-012-24?min_score=3 HTTP/1.1" 200 -
2024-11-25 22:05:33,065 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,139 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,139 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,140 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.1
2024-11-25 22:05:33,232 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,232 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,234 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:33] "GET /api/graph/T-012-24?min_score=10 HTTP/1.1" 200 -
2024-11-25 22:05:33,332 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,396 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,414 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,414 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.15
2024-11-25 22:05:33,483 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,531 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,532 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,535 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,536 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,538 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,539 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,541 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,542 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,549 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:33] "GET /api/graph/T-012-24?min_score=15 HTTP/1.1" 200 -
2024-11-25 22:05:33,617 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,666 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,666 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.18
2024-11-25 22:05:33,737 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,766 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,819 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,837 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,839 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,844 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,847 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,848 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,849 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:33,855 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:33] "GET /api/graph/T-012-24?min_score=18 HTTP/1.1" 200 -
2024-11-25 22:05:33,855 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,855 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:33,905 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,906 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,907 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.22
2024-11-25 22:05:33,936 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,967 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:33,970 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,971 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:33,971 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.23
2024-11-25 22:05:33,975 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.24
2024-11-25 22:05:34,030 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,039 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,094 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,118 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,128 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,131 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,137 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,141 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,143 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,145 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,160 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,161 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,163 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,165 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,166 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,167 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,168 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,169 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,174 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,175 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,176 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,177 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,181 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:34] "GET /api/graph/T-012-24?min_score=22 HTTP/1.1" 200 -
2024-11-25 22:05:34,182 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,185 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:34] "GET /api/graph/T-012-24?min_score=24 HTTP/1.1" 200 -
2024-11-25 22:05:34,187 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:34,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:34] "GET /api/graph/T-012-24?min_score=23 HTTP/1.1" 200 -
2024-11-25 22:05:34,966 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:35,015 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:35,015 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:35,015 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.25
2024-11-25 22:05:35,112 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,112 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,112 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,112 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,126 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,126 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:35] "GET /api/graph/T-012-24?min_score=25 HTTP/1.1" 200 -
2024-11-25 22:05:35,301 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:35,371 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:35,372 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:35,372 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.27
2024-11-25 22:05:35,460 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,468 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,468 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,468 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,477 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,477 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,484 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,484 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,484 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:35] "GET /api/graph/T-012-24?min_score=27 HTTP/1.1" 200 -
2024-11-25 22:05:35,540 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:05:35,653 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:05:35,659 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:05:35,659 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.28
2024-11-25 22:05:35,728 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,730 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,731 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,731 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,736 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,737 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,738 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,739 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:05:35,742 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:05:35] "GET /api/graph/T-012-24?min_score=28 HTTP/1.1" 200 -
2024-11-25 22:11:01,536 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 22:11:01,537 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 22:11:02,194 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 22:11:05,766 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 22:11:05,782 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 22:11:05,972 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 22:11:07,576 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 22:11:07,691 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 22:11:07,691 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000002223C0CD5B0>
2024-11-25 22:11:08,214 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 22:11:08,278 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 22:11:08,278 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 22:11:08,295 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 22:11:08,295 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 22:11:10,424 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:10,858 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:10,887 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:10,891 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 22:11:10,903 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:10] "GET / HTTP/1.1" 200 -
2024-11-25 22:11:12,129 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:12,189 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:12,190 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:12,240 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:12,302 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:12] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 22:11:12,309 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:12,318 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:12,319 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:12] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 22:11:12,526 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:12,526 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:12,549 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:12,645 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:12,646 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:12,647 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:12] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 22:11:12,717 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:12,717 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:12,719 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:12] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 22:11:12,891 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:12,891 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:12,893 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:12] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 22:11:14,530 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:14,545 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:14,624 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:14,624 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:14,624 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:14,624 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:14,624 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 22:11:14,624 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 22:11:14,781 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 625} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 493} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 661} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 348} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,797 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 417} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 313} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 237} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,813 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 528} for query: '\n            MATCH (p1:Providencia)-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:14,889 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:14] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:11:14,993 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 22:11:15,106 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:15] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 22:11:26,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:26,717 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:26,717 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:26,717 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,783 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:26,795 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:26] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:27,165 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:27,217 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:27,217 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:27,217 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 22:11:27,285 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,290 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,292 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,292 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,295 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,297 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,297 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,297 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,297 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:27] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:27,524 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:27,579 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:27,579 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:27,579 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 22:11:27,653 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,653 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:27,655 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,658 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,658 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,663 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,665 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,666 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,667 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,668 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:27] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:27,723 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:27,724 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:27,724 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 22:11:27,786 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,789 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,792 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,794 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,801 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,802 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,803 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,804 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:27,806 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:27] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:27,881 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:27,943 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:27,944 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:27,945 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 22:11:28,005 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,008 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,010 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,013 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,014 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,014 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,020 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,024 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,024 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:28] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:28,080 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:28,140 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:28,140 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:28,141 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 22:11:28,202 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,204 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,205 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,206 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,207 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,208 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,209 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,211 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:28] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:28,473 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:28,533 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:28,533 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:28,533 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,594 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:28] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:11:28,818 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:11:28,873 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:11:28,873 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:11:28,873 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 22:11:28,952 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,952 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:11:28,967 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:11:28] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:12:24,382 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:12:24,509 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:12:24,509 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:12:24,514 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.32
2024-11-25 22:12:24,589 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 343} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,589 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 691} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,605 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 558} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,605 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 523} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 378} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 447} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 267} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,608 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 655} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE toFloat(r.index_simm) >= $min_score\n            WITH DISTINCT p1, p2, r\n            RETURN \n                collect(DISTINCT {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(DISTINCT {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(DISTINCT {\n                    source: id(p1),\n                    target: id(p2),\n                    score: toFloat(r.index_simm)\n                }) as relationships,\n                count(DISTINCT r) as total_relations\n            '
2024-11-25 22:12:24,608 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:12:24] "GET /api/graph/T-012-24?min_score=32 HTTP/1.1" 200 -
2024-11-25 22:23:39,814 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 22:23:39,815 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 22:23:40,490 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 22:23:44,419 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 22:23:44,433 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 22:23:44,613 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 22:23:46,305 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 22:23:46,420 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 22:23:46,420 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001675A2F7CE0>
2024-11-25 22:23:47,070 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 22:23:47,128 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 22:23:47,146 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 22:23:47,161 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 22:23:47,170 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 22:26:04,608 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:05,090 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:05,090 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:05,090 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 22:26:05,090 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:05] "GET / HTTP/1.1" 200 -
2024-11-25 22:26:06,318 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:06,366 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:06,366 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:06,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:06,445 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:06,445 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:06,509 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:06] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 22:26:06,540 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:06] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 22:26:06,674 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:06,681 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:06,700 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:06,730 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:06,740 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:06,742 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:06] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 22:26:06,782 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:06,787 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:06,788 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:06] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 22:26:06,977 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:06,977 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:06,979 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:06] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 22:26:08,514 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:08,561 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:08,576 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:08,576 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:08,576 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 22:26:08,576 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 22:26:08,639 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:08,639 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:08,639 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 22:26:08,924 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 22:26:08,940 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:08] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:26:08,997 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 22:26:08,998 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:08] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 22:26:36,881 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:37,114 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:37,186 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:37,187 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 22:26:37,187 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T', 'min_score': 0.0}
2024-11-25 22:26:37,334 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:37] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:37,515 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:37,572 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:37,572 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:37,573 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 22:26:37,574 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-', 'min_score': 0.0}
2024-11-25 22:26:37,742 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:37] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:38,296 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:38,320 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:38,468 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:38,492 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:38,494 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:38,591 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 22:26:38,625 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:38,625 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:38,749 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:38,851 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-01', 'min_score': 0.0}
2024-11-25 22:26:38,853 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 22:26:38,854 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-0', 'min_score': 0.0}
2024-11-25 22:26:38,906 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:38,914 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:38,916 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 22:26:38,917 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-', 'min_score': 0.0}
2024-11-25 22:26:38,941 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:38,964 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:38,964 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 22:26:38,966 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012', 'min_score': 0.0}
2024-11-25 22:26:38,972 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:38] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:38,995 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:38] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:39,025 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:39] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:39,049 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:39] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:39,115 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:39,186 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:39,188 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:39,189 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 22:26:39,189 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-2', 'min_score': 0.0}
2024-11-25 22:26:39,248 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:39] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:26:39,683 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:39,739 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:39,740 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:39,741 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 22:26:39,741 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.0}
2024-11-25 22:26:39,829 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:26:39,835 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:39] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:26:49,780 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:26:49,866 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:26:49,866 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:26:49,867 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.13
2024-11-25 22:26:49,867 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.13}
2024-11-25 22:26:49,951 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:26:49,954 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:26:49] "GET /api/graph/T-012-24?min_score=13 HTTP/1.1" 200 -
2024-11-25 22:27:00,304 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:00,479 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:00,479 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:00,480 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.39
2024-11-25 22:27:00,480 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.39}
2024-11-25 22:27:00,564 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:00,566 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:00] "GET /api/graph/T-012-24?min_score=39 HTTP/1.1" 200 -
2024-11-25 22:27:01,237 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:01,259 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:01,292 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:01,293 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:01,293 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.36
2024-11-25 22:27:01,293 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.36}
2024-11-25 22:27:01,323 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:01,325 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:01,325 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:01,327 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:01,327 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.34
2024-11-25 22:27:01,328 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.34}
2024-11-25 22:27:01,379 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:01,383 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:01] "GET /api/graph/T-012-24?min_score=36 HTTP/1.1" 200 -
2024-11-25 22:27:01,412 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:01,448 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:01,449 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.33
2024-11-25 22:27:01,449 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.33}
2024-11-25 22:27:01,514 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:01,518 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:01,670 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:01,731 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:01] "GET /api/graph/T-012-24?min_score=33 HTTP/1.1" 200 -
2024-11-25 22:27:01,760 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:01,826 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:01] "GET /api/graph/T-012-24?min_score=34 HTTP/1.1" 200 -
2024-11-25 22:27:01,848 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:01,850 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.35
2024-11-25 22:27:01,879 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.35}
2024-11-25 22:27:01,901 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:01,955 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:02,031 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:02,055 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:02] "GET /api/graph/T-012-24?min_score=35 HTTP/1.1" 200 -
2024-11-25 22:27:02,056 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.32
2024-11-25 22:27:02,101 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.32}
2024-11-25 22:27:02,153 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:02,218 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:02,219 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:02,220 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.3
2024-11-25 22:27:02,222 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.3}
2024-11-25 22:27:02,267 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:02,313 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:02,320 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:02] "GET /api/graph/T-012-24?min_score=32 HTTP/1.1" 200 -
2024-11-25 22:27:02,323 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:02] "GET /api/graph/T-012-24?min_score=30 HTTP/1.1" 200 -
2024-11-25 22:27:03,239 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,316 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:03,352 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:03,353 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.28
2024-11-25 22:27:03,353 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.28}
2024-11-25 22:27:03,440 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:03,490 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:03] "GET /api/graph/T-012-24?min_score=28 HTTP/1.1" 200 -
2024-11-25 22:27:03,526 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,535 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,614 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:03,669 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:03,669 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.19
2024-11-25 22:27:03,669 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.19}
2024-11-25 22:27:03,708 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:03,754 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:03,754 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.25
2024-11-25 22:27:03,755 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.25}
2024-11-25 22:27:03,771 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:03,803 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:03] "GET /api/graph/T-012-24?min_score=19 HTTP/1.1" 200 -
2024-11-25 22:27:03,814 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:03,852 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:03] "GET /api/graph/T-012-24?min_score=25 HTTP/1.1" 200 -
2024-11-25 22:27:03,940 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,949 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,976 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:03,997 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:03,998 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:03,998 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.2
2024-11-25 22:27:03,999 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.2}
2024-11-25 22:27:04,052 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:04,052 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:04,053 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.23
2024-11-25 22:27:04,053 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.23}
2024-11-25 22:27:04,057 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:04,057 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:04,058 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.22
2024-11-25 22:27:04,059 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.22}
2024-11-25 22:27:04,132 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:04,135 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:04] "GET /api/graph/T-012-24?min_score=23 HTTP/1.1" 200 -
2024-11-25 22:27:04,163 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:04,167 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:04] "GET /api/graph/T-012-24?min_score=20 HTTP/1.1" 200 -
2024-11-25 22:27:04,185 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:04,188 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:04] "GET /api/graph/T-012-24?min_score=22 HTTP/1.1" 200 -
2024-11-25 22:27:05,182 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:05,309 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:05,344 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:05,356 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.24
2024-11-25 22:27:05,358 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.24}
2024-11-25 22:27:05,444 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:05,468 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:05] "GET /api/graph/T-012-24?min_score=24 HTTP/1.1" 200 -
2024-11-25 22:27:05,560 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:05,587 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:05,622 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:05,662 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:05,663 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.26
2024-11-25 22:27:05,663 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.26}
2024-11-25 22:27:05,667 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:05,677 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:05,677 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.25
2024-11-25 22:27:05,678 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.25}
2024-11-25 22:27:05,749 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:05,752 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:05] "GET /api/graph/T-012-24?min_score=25 HTTP/1.1" 200 -
2024-11-25 22:27:05,784 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:05,787 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:05] "GET /api/graph/T-012-24?min_score=26 HTTP/1.1" 200 -
2024-11-25 22:27:16,721 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:16,737 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:16,752 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:16,775 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:16,795 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:27:16,941 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:16,941 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:16,941 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:16,941 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:16,941 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.31
2024-11-25 22:27:16,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.28
2024-11-25 22:27:16,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:16,951 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.31}
2024-11-25 22:27:16,951 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.28}
2024-11-25 22:27:16,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:16,954 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.27
2024-11-25 22:27:16,954 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.27}
2024-11-25 22:27:17,033 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:17,033 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:17] "GET /api/graph/T-012-24?min_score=31 HTTP/1.1" 200 -
2024-11-25 22:27:17,072 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:17,075 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:17] "GET /api/graph/T-012-24?min_score=28 HTTP/1.1" 200 -
2024-11-25 22:27:17,103 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:17,133 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:17] "GET /api/graph/T-012-24?min_score=27 HTTP/1.1" 200 -
2024-11-25 22:27:17,142 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:17,145 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:27:17,195 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:17,196 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.3
2024-11-25 22:27:17,196 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.3}
2024-11-25 22:27:17,198 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:27:17,198 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.29
2024-11-25 22:27:17,199 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.29}
2024-11-25 22:27:17,256 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:17,286 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:27:17,288 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:17] "GET /api/graph/T-012-24?min_score=30 HTTP/1.1" 200 -
2024-11-25 22:27:17,291 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:27:17] "GET /api/graph/T-012-24?min_score=29 HTTP/1.1" 200 -
2024-11-25 22:32:12,029 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 22:32:12,031 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 22:32:12,862 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 22:32:16,545 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 22:32:16,553 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 22:32:16,680 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 22:32:18,296 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 22:32:18,423 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 22:32:18,423 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000002D2CBF84260>
2024-11-25 22:32:18,983 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 22:32:19,045 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 22:32:19,045 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 22:32:19,058 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 22:32:19,058 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 22:32:20,971 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:21,430 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:21,509 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:21,574 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 22:32:21,641 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:21] "GET / HTTP/1.1" 200 -
2024-11-25 22:32:23,003 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:23,065 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:23,066 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:23,077 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:23,148 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:23,149 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:23,220 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:23] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 22:32:23,273 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:23] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 22:32:23,343 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:23,347 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:23,405 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:23,414 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:23,417 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:23] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 22:32:23,434 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:23,473 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:23,542 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:23,545 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:23] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 22:32:23,670 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:23,671 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:23,673 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:23] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 22:32:25,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:25,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:32:25,473 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:25,473 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:25,473 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 22:32:25,473 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 22:32:25,670 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:32:25,676 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:32:25,677 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 22:32:25,729 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 22:32:25,735 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:25] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:32:26,039 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 22:32:26,041 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:32:26] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 22:33:05,811 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:06,165 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:06,165 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:06,166 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 0.0
2024-11-25 22:33:06,166 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T', 'min_score': 0.0}
2024-11-25 22:33:06,296 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:06] "[33mGET /api/graph/T?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:06,372 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:06,453 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:06,458 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:06,459 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 0.0
2024-11-25 22:33:06,459 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-', 'min_score': 0.0}
2024-11-25 22:33:06,526 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:06] "[33mGET /api/graph/T-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:06,698 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:06,749 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:06,749 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:06,749 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-0 con similitud m√≠nima de 0.0
2024-11-25 22:33:06,749 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-0', 'min_score': 0.0}
2024-11-25 22:33:06,812 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:06] "[33mGET /api/graph/T-0?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:06,863 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:06,944 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:06,946 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:06,946 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-01 con similitud m√≠nima de 0.0
2024-11-25 22:33:06,947 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-01', 'min_score': 0.0}
2024-11-25 22:33:07,006 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:07] "[33mGET /api/graph/T-01?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:07,104 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:07,171 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:07,177 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:07,178 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012 con similitud m√≠nima de 0.0
2024-11-25 22:33:07,178 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012', 'min_score': 0.0}
2024-11-25 22:33:07,238 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:07] "[33mGET /api/graph/T-012?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:07,312 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:07,372 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:07,378 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:07,378 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012- con similitud m√≠nima de 0.0
2024-11-25 22:33:07,378 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-', 'min_score': 0.0}
2024-11-25 22:33:07,438 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:07] "[33mGET /api/graph/T-012-?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:07,811 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:07,859 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:07,859 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:07,875 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-2 con similitud m√≠nima de 0.0
2024-11-25 22:33:07,875 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-2', 'min_score': 0.0}
2024-11-25 22:33:07,922 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:07] "[33mGET /api/graph/T-012-2?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 22:33:08,006 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:08,066 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:08,067 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:08,067 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 0.0
2024-11-25 22:33:08,068 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 0.0}
2024-11-25 22:33:08,140 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:08,155 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:08] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 22:33:14,941 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:14,966 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:15,005 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:15,005 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:15,021 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,021 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,021 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 2.0
2024-11-25 22:33:15,036 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 2.0}
2024-11-25 22:33:15,038 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,039 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,039 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 1.0
2024-11-25 22:33:15,039 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 1.0}
2024-11-25 22:33:15,065 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,065 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,066 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 3.0
2024-11-25 22:33:15,066 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 3.0}
2024-11-25 22:33:15,121 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,124 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=2 HTTP/1.1" 200 -
2024-11-25 22:33:15,156 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,186 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:15,193 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,219 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,221 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,222 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 4.0
2024-11-25 22:33:15,222 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 4.0}
2024-11-25 22:33:15,226 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=1 HTTP/1.1" 200 -
2024-11-25 22:33:15,230 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=3 HTTP/1.1" 200 -
2024-11-25 22:33:15,244 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:15,295 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,326 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,327 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 6.0
2024-11-25 22:33:15,327 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 6.0}
2024-11-25 22:33:15,348 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,361 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:15,375 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=4 HTTP/1.1" 200 -
2024-11-25 22:33:15,375 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:15,376 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 7.0
2024-11-25 22:33:15,377 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 7.0}
2024-11-25 22:33:15,393 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,441 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:15,463 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=6 HTTP/1.1" 200 -
2024-11-25 22:33:15,465 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:15] "GET /api/graph/T-012-24?min_score=7 HTTP/1.1" 200 -
2024-11-25 22:33:16,983 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,125 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,150 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,154 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,155 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,156 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 8.0
2024-11-25 22:33:17,156 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 8.0}
2024-11-25 22:33:17,195 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,196 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,197 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 9.0
2024-11-25 22:33:17,197 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 9.0}
2024-11-25 22:33:17,226 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,226 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,227 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 10.0
2024-11-25 22:33:17,228 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 10.0}
2024-11-25 22:33:17,315 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,317 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=8 HTTP/1.1" 200 -
2024-11-25 22:33:17,323 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,341 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=9 HTTP/1.1" 200 -
2024-11-25 22:33:17,384 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,399 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,415 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:17,472 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,472 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,473 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 13.0
2024-11-25 22:33:17,473 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 13.0}
2024-11-25 22:33:17,475 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,475 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,476 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 12.0
2024-11-25 22:33:17,476 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 12.0}
2024-11-25 22:33:17,524 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,530 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=10 HTTP/1.1" 200 -
2024-11-25 22:33:17,538 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,540 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=13 HTTP/1.1" 200 -
2024-11-25 22:33:17,544 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:17,544 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:17,545 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 14.0
2024-11-25 22:33:17,546 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 14.0}
2024-11-25 22:33:17,576 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,584 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=12 HTTP/1.1" 200 -
2024-11-25 22:33:17,613 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:17,616 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:17] "GET /api/graph/T-012-24?min_score=14 HTTP/1.1" 200 -
2024-11-25 22:33:18,810 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:18,961 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:18,962 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:18,962 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 15.0
2024-11-25 22:33:18,962 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 15.0}
2024-11-25 22:33:19,046 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 100 relaciones cumplen el criterio de similitud
2024-11-25 22:33:19,046 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:19] "GET /api/graph/T-012-24?min_score=15 HTTP/1.1" 200 -
2024-11-25 22:33:34,201 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:34,266 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:34,266 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:34,266 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 45.0
2024-11-25 22:33:34,266 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 45.0}
2024-11-25 22:33:34,329 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:34] "[33mGET /api/graph/T-012-24?min_score=45 HTTP/1.1[0m" 404 -
2024-11-25 22:33:43,383 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:43,455 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:43,459 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:43,460 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 43.0
2024-11-25 22:33:43,464 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 43.0}
2024-11-25 22:33:43,519 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:43] "[33mGET /api/graph/T-012-24?min_score=43 HTTP/1.1[0m" 404 -
2024-11-25 22:33:43,624 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:43,675 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:43,683 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:43,683 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:43,683 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 42.0
2024-11-25 22:33:43,684 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 42.0}
2024-11-25 22:33:43,734 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:43,734 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:43,734 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 41.0
2024-11-25 22:33:43,735 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 41.0}
2024-11-25 22:33:43,796 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:43] "[33mGET /api/graph/T-012-24?min_score=42 HTTP/1.1[0m" 404 -
2024-11-25 22:33:43,799 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:43] "[33mGET /api/graph/T-012-24?min_score=41 HTTP/1.1[0m" 404 -
2024-11-25 22:33:43,926 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:43,933 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:43,940 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:44,045 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:44,045 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:44,045 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:44,045 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:44,045 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 39.0
2024-11-25 22:33:44,047 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 40.0
2024-11-25 22:33:44,047 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 39.0}
2024-11-25 22:33:44,047 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 40.0}
2024-11-25 22:33:44,047 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:44,047 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:44,047 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 38.0
2024-11-25 22:33:44,047 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 38.0}
2024-11-25 22:33:44,172 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:44] "[33mGET /api/graph/T-012-24?min_score=38 HTTP/1.1[0m" 404 -
2024-11-25 22:33:44,178 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:44] "[33mGET /api/graph/T-012-24?min_score=40 HTTP/1.1[0m" 404 -
2024-11-25 22:33:44,178 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:44] "[33mGET /api/graph/T-012-24?min_score=39 HTTP/1.1[0m" 404 -
2024-11-25 22:33:45,014 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,076 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,076 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,076 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 37.0
2024-11-25 22:33:45,076 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 37.0}
2024-11-25 22:33:45,145 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "[33mGET /api/graph/T-012-24?min_score=37 HTTP/1.1[0m" 404 -
2024-11-25 22:33:45,269 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,327 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,328 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,329 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 36.0
2024-11-25 22:33:45,330 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 36.0}
2024-11-25 22:33:45,389 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "[33mGET /api/graph/T-012-24?min_score=36 HTTP/1.1[0m" 404 -
2024-11-25 22:33:45,398 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,459 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,460 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,460 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 35.0
2024-11-25 22:33:45,461 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 35.0}
2024-11-25 22:33:45,527 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 22:33:45,551 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "GET /api/graph/T-012-24?min_score=35 HTTP/1.1" 200 -
2024-11-25 22:33:45,724 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,724 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,741 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:45,836 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,844 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 32.0
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 34.0
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 32.0}
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 34.0}
2024-11-25 22:33:45,844 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:45,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 33.0
2024-11-25 22:33:45,844 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 33.0}
2024-11-25 22:33:45,899 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 8 relaciones cumplen el criterio de similitud
2024-11-25 22:33:45,907 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "GET /api/graph/T-012-24?min_score=32 HTTP/1.1" 200 -
2024-11-25 22:33:45,936 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 22:33:45,942 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "GET /api/graph/T-012-24?min_score=34 HTTP/1.1" 200 -
2024-11-25 22:33:45,966 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 5 relaciones cumplen el criterio de similitud
2024-11-25 22:33:45,967 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:45] "GET /api/graph/T-012-24?min_score=33 HTTP/1.1" 200 -
2024-11-25 22:33:46,709 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:46,773 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:46,773 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:46,773 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 31.0
2024-11-25 22:33:46,773 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 31.0}
2024-11-25 22:33:46,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:33:46,826 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 11 relaciones cumplen el criterio de similitud
2024-11-25 22:33:46,836 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:46] "GET /api/graph/T-012-24?min_score=31 HTTP/1.1" 200 -
2024-11-25 22:33:46,903 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:33:46,908 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:33:46,908 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 30.0
2024-11-25 22:33:46,909 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 30.0}
2024-11-25 22:33:46,968 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 15 relaciones cumplen el criterio de similitud
2024-11-25 22:33:46,969 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:33:46] "GET /api/graph/T-012-24?min_score=30 HTTP/1.1" 200 -
2024-11-25 22:43:14,982 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:15,013 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:15,013 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:15,045 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:15,061 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:15,076 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:34,316 - neo4j.io - ERROR - [_bolt.py:1037] - [#F3B7]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 22:43:34,320 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 22:43:34,320 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 22:43:34,320 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 22:43:34,321 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 22:43:34,321 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 29.0
2024-11-25 22:43:34,321 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 29.0}
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:34,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 30.0
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:34,951 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 30.0}
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:34,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:34,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 32.0
2024-11-25 22:43:34,960 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:34,960 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:34,960 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 32.0}
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 33.0
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 31.0
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 28.0
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 33.0}
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 31.0}
2024-11-25 22:43:34,960 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 28.0}
2024-11-25 22:43:34,993 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 18 relaciones cumplen el criterio de similitud
2024-11-25 22:43:34,993 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:34] "GET /api/graph/T-012-24?min_score=29 HTTP/1.1" 200 -
2024-11-25 22:43:35,066 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 8 relaciones cumplen el criterio de similitud
2024-11-25 22:43:35,067 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:35] "GET /api/graph/T-012-24?min_score=32 HTTP/1.1" 200 -
2024-11-25 22:43:35,100 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 5 relaciones cumplen el criterio de similitud
2024-11-25 22:43:35,104 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 15 relaciones cumplen el criterio de similitud
2024-11-25 22:43:35,127 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 11 relaciones cumplen el criterio de similitud
2024-11-25 22:43:35,151 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:35] "GET /api/graph/T-012-24?min_score=33 HTTP/1.1" 200 -
2024-11-25 22:43:35,152 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:35] "GET /api/graph/T-012-24?min_score=31 HTTP/1.1" 200 -
2024-11-25 22:43:35,158 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:35] "GET /api/graph/T-012-24?min_score=30 HTTP/1.1" 200 -
2024-11-25 22:43:35,198 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 23 relaciones cumplen el criterio de similitud
2024-11-25 22:43:35,200 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:35] "GET /api/graph/T-012-24?min_score=28 HTTP/1.1" 200 -
2024-11-25 22:43:36,670 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,705 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,720 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,720 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,720 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 34.0
2024-11-25 22:43:36,720 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 34.0}
2024-11-25 22:43:36,733 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,752 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,752 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,800 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:36,814 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,816 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,816 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 36.0
2024-11-25 22:43:36,816 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 36.0}
2024-11-25 22:43:36,842 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 22:43:36,842 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:36] "GET /api/graph/T-012-24?min_score=34 HTTP/1.1" 200 -
2024-11-25 22:43:36,919 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,921 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,922 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 39.0
2024-11-25 22:43:36,923 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 39.0}
2024-11-25 22:43:36,949 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,949 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,955 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:36,959 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,970 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,971 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:36,972 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 40.0
2024-11-25 22:43:36,972 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 38.0
2024-11-25 22:43:36,972 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 37.0
2024-11-25 22:43:36,973 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 40.0}
2024-11-25 22:43:36,973 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 38.0}
2024-11-25 22:43:36,973 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 37.0}
2024-11-25 22:43:36,980 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:36] "[33mGET /api/graph/T-012-24?min_score=39 HTTP/1.1[0m" 404 -
2024-11-25 22:43:37,053 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:37] "[33mGET /api/graph/T-012-24?min_score=40 HTTP/1.1[0m" 404 -
2024-11-25 22:43:37,082 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:37] "[33mGET /api/graph/T-012-24?min_score=38 HTTP/1.1[0m" 404 -
2024-11-25 22:43:37,109 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:37] "[33mGET /api/graph/T-012-24?min_score=37 HTTP/1.1[0m" 404 -
2024-11-25 22:43:37,112 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:37] "[33mGET /api/graph/T-012-24?min_score=36 HTTP/1.1[0m" 404 -
2024-11-25 22:43:38,344 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,401 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,407 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,408 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 41.0
2024-11-25 22:43:38,408 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 41.0}
2024-11-25 22:43:38,466 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "[33mGET /api/graph/T-012-24?min_score=41 HTTP/1.1[0m" 404 -
2024-11-25 22:43:38,575 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,650 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,652 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,661 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,691 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:38,708 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,717 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,717 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 42.0
2024-11-25 22:43:38,718 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 42.0}
2024-11-25 22:43:38,735 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,736 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,736 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 37.0
2024-11-25 22:43:38,737 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 37.0}
2024-11-25 22:43:38,763 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,763 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,764 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 35.0
2024-11-25 22:43:38,764 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 35.0}
2024-11-25 22:43:38,789 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,790 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,790 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 38.0
2024-11-25 22:43:38,790 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 38.0}
2024-11-25 22:43:38,817 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "[33mGET /api/graph/T-012-24?min_score=42 HTTP/1.1[0m" 404 -
2024-11-25 22:43:38,844 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "[33mGET /api/graph/T-012-24?min_score=37 HTTP/1.1[0m" 404 -
2024-11-25 22:43:38,871 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "[33mGET /api/graph/T-012-24?min_score=38 HTTP/1.1[0m" 404 -
2024-11-25 22:43:38,876 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:38,876 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:38,877 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 43.0
2024-11-25 22:43:38,877 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 43.0}
2024-11-25 22:43:38,905 - routes.similitudes - INFO - [similitudes.py:155] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 22:43:38,906 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "GET /api/graph/T-012-24?min_score=35 HTTP/1.1" 200 -
2024-11-25 22:43:38,963 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:38] "[33mGET /api/graph/T-012-24?min_score=43 HTTP/1.1[0m" 404 -
2024-11-25 22:43:40,045 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:40,107 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:40,108 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:40,108 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 36.0
2024-11-25 22:43:40,108 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 36.0}
2024-11-25 22:43:40,164 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:40] "[33mGET /api/graph/T-012-24?min_score=36 HTTP/1.1[0m" 404 -
2024-11-25 22:43:40,343 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:40,399 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:40,399 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:40,400 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 37.0
2024-11-25 22:43:40,400 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 37.0}
2024-11-25 22:43:40,452 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:40] "[33mGET /api/graph/T-012-24?min_score=37 HTTP/1.1[0m" 404 -
2024-11-25 22:43:47,987 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:47,987 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 22:43:48,087 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:48,087 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 22:43:48,087 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:48,087 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 22:43:48,087 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 40.0
2024-11-25 22:43:48,087 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-012-24 con similitud m√≠nima de 39.0
2024-11-25 22:43:48,087 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 40.0}
2024-11-25 22:43:48,087 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-012-24', 'min_score': 39.0}
2024-11-25 22:43:48,177 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:48] "[33mGET /api/graph/T-012-24?min_score=40 HTTP/1.1[0m" 404 -
2024-11-25 22:43:48,177 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 22:43:48] "[33mGET /api/graph/T-012-24?min_score=39 HTTP/1.1[0m" 404 -
2024-11-25 23:13:39,310 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\routes\\similitudes.py', reloading
2024-11-25 23:13:39,311 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 23:13:40,176 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 23:13:43,435 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 23:13:43,436 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 23:13:43,532 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 23:13:45,137 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 23:13:45,254 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 23:13:45,255 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001FDE9881430>
2024-11-25 23:13:45,802 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 23:13:45,871 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 23:13:45,872 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 23:13:45,883 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 23:13:45,887 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 23:13:54,208 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:54,621 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:54,621 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:54,622 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 23:13:54,630 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:54] "GET / HTTP/1.1" 200 -
2024-11-25 23:13:55,929 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:55,939 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:55,987 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:55,988 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:56,108 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:56] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 23:13:56,194 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:56,211 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:56,211 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:56,212 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:56] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 23:13:56,251 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:56,256 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:56,257 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:56] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-25 23:13:56,275 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:56,282 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:56,333 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:56,333 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:56,335 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:56] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 23:13:56,364 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:56,366 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:56,369 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:56] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 23:13:57,874 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:57,938 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:57,938 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:57,938 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 23:13:57,938 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 23:13:57,986 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:13:58,049 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:13:58,081 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:13:58,081 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 23:13:58,263 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:13:58,272 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:58] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 23:13:58,450 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 23:13:58,455 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:13:58] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 23:14:24,357 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:24,527 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:24,527 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:24,527 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-25 23:14:24,527 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-25 23:14:24,622 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-25 23:14:24,622 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:24] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-25 23:14:38,340 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,357 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,403 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,403 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,420 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,420 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:38,576 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,576 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,576 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-25 23:14:38,576 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-25 23:14:38,626 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,626 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,626 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 32.0
2024-11-25 23:14:38,626 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 32.0}
2024-11-25 23:14:38,657 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,657 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,657 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 36.0
2024-11-25 23:14:38,657 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 36.0}
2024-11-25 23:14:38,737 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,737 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,737 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 45.0
2024-11-25 23:14:38,737 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 45.0}
2024-11-25 23:14:38,769 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-25 23:14:38,769 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:38] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-25 23:14:38,808 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 19 relaciones cumplen el criterio de similitud
2024-11-25 23:14:38,819 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:38] "GET /api/graph/%20?min_score=45 HTTP/1.1" 200 -
2024-11-25 23:14:38,836 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,836 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,837 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-25 23:14:38,838 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-25 23:14:38,859 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:38,860 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:38,860 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 58.0
2024-11-25 23:14:38,861 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 58.0}
2024-11-25 23:14:38,926 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:14:38,927 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:38] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-25 23:14:38,931 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:14:38,934 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:38] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-25 23:14:38,995 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 63 relaciones cumplen el criterio de similitud
2024-11-25 23:14:38,997 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:38] "GET /api/graph/%20?min_score=36 HTTP/1.1" 200 -
2024-11-25 23:14:39,001 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 121 relaciones cumplen el criterio de similitud
2024-11-25 23:14:39,003 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:39] "GET /api/graph/%20?min_score=32 HTTP/1.1" 200 -
2024-11-25 23:14:40,269 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:40,332 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:40,335 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:40,336 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 64.0
2024-11-25 23:14:40,336 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 64.0}
2024-11-25 23:14:40,355 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:40,394 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:14:40,401 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:40] "GET /api/graph/%20?min_score=64 HTTP/1.1" 200 -
2024-11-25 23:14:40,421 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:40,421 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:40,421 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 68.0
2024-11-25 23:14:40,421 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 68.0}
2024-11-25 23:14:40,489 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:40] "GET /api/graph/%20?min_score=68 HTTP/1.1" 200 -
2024-11-25 23:14:40,989 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:40,989 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:41,045 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:41,045 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:41,045 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 71.0
2024-11-25 23:14:41,045 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 71.0}
2024-11-25 23:14:41,076 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:41,076 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:41,084 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 72.0
2024-11-25 23:14:41,084 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 72.0}
2024-11-25 23:14:41,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:41] "GET /api/graph/%20?min_score=71 HTTP/1.1" 200 -
2024-11-25 23:14:41,176 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:41] "GET /api/graph/%20?min_score=72 HTTP/1.1" 200 -
2024-11-25 23:14:41,955 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:14:42,018 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:14:42,018 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:14:42,018 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:14:42] "GET /static/assets/images/cr7.jpg HTTP/1.1" 200 -
2024-11-25 23:28:28,976 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:28:44,763 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:28:44,881 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:28:44,951 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:28:44,967 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:28:48,289 - neo4j.io - ERROR - [_bolt.py:1037] - [#FF9E]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 23:28:48,289 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 23:28:48,289 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 23:28:48,289 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 23:28:48,289 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 23:28:48,289 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 16.0
2024-11-25 23:28:48,289 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 16.0}
2024-11-25 23:28:48,956 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:28:48,956 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:28:48,957 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:28:48,957 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:28:48,957 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:28:48,957 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:28:48,958 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 13.0
2024-11-25 23:28:48,958 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 14.0
2024-11-25 23:28:48,958 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 11.0
2024-11-25 23:28:48,959 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 13.0}
2024-11-25 23:28:48,959 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 14.0}
2024-11-25 23:28:48,960 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 11.0}
2024-11-25 23:28:48,971 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:28:48,972 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:28:48,972 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 23:28:48,973 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 23:28:49,124 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:28:49,137 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:28:49] "GET /api/graph/%20?min_score=16 HTTP/1.1" 200 -
2024-11-25 23:28:49,166 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:28:49,225 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:28:49,268 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:28:49,280 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:28:49,318 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:28:49] "GET /api/graph/%20?min_score=14 HTTP/1.1" 200 -
2024-11-25 23:28:49,350 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:28:49] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 23:28:49,380 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:28:49] "GET /api/graph/%20?min_score=13 HTTP/1.1" 200 -
2024-11-25 23:28:49,401 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:28:49] "GET /api/graph/%20?min_score=11 HTTP/1.1" 200 -
2024-11-25 23:29:45,046 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,046 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,078 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,126 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,138 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,138 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:45,192 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,193 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,193 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 3.0
2024-11-25 23:29:45,193 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 3.0}
2024-11-25 23:29:45,277 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,277 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,286 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 1.0
2024-11-25 23:29:45,286 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 1.0}
2024-11-25 23:29:45,302 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,302 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,302 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,302 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,317 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 5.0
2024-11-25 23:29:45,317 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 15.0
2024-11-25 23:29:45,317 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 5.0}
2024-11-25 23:29:45,317 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 15.0}
2024-11-25 23:29:45,348 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,348 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,348 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 30.0
2024-11-25 23:29:45,348 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 30.0}
2024-11-25 23:29:45,444 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,460 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=3 HTTP/1.1" 200 -
2024-11-25 23:29:45,460 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,514 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 183 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,492 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,476 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:45,552 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=1 HTTP/1.1" 200 -
2024-11-25 23:29:45,574 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=15 HTTP/1.1" 200 -
2024-11-25 23:29:45,600 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,615 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:45,616 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 64.0
2024-11-25 23:29:45,616 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 64.0}
2024-11-25 23:29:45,630 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=5 HTTP/1.1" 200 -
2024-11-25 23:29:45,638 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=30 HTTP/1.1" 200 -
2024-11-25 23:29:45,723 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:29:45,786 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:45] "GET /api/graph/%20?min_score=64 HTTP/1.1" 200 -
2024-11-25 23:29:47,499 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:47,586 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:47,656 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:47,656 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 99.0
2024-11-25 23:29:47,658 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 99.0}
2024-11-25 23:29:47,722 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:47] "GET /api/graph/%20?min_score=99 HTTP/1.1" 200 -
2024-11-25 23:29:47,860 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:47,921 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:47,941 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:48,017 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:48,025 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 96.0
2024-11-25 23:29:48,026 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 96.0}
2024-11-25 23:29:48,043 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:48,047 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:48,073 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:48,083 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:48,097 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:48,097 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 88.0
2024-11-25 23:29:48,098 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 88.0}
2024-11-25 23:29:48,115 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:48,115 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:48,116 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 100.0
2024-11-25 23:29:48,117 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 100.0}
2024-11-25 23:29:48,156 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:48,156 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:48,157 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 92.0
2024-11-25 23:29:48,157 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 92.0}
2024-11-25 23:29:48,221 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:48] "GET /api/graph/%20?min_score=100 HTTP/1.1" 200 -
2024-11-25 23:29:48,251 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:48,251 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:48,251 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 87.0
2024-11-25 23:29:48,252 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 87.0}
2024-11-25 23:29:48,253 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:48] "GET /api/graph/%20?min_score=96 HTTP/1.1" 200 -
2024-11-25 23:29:48,295 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:48] "GET /api/graph/%20?min_score=92 HTTP/1.1" 200 -
2024-11-25 23:29:48,331 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:48] "GET /api/graph/%20?min_score=88 HTTP/1.1" 200 -
2024-11-25 23:29:48,371 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:48] "GET /api/graph/%20?min_score=87 HTTP/1.1" 200 -
2024-11-25 23:29:49,498 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:49,560 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:49,560 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:49,560 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 85.0
2024-11-25 23:29:49,560 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 85.0}
2024-11-25 23:29:49,623 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:49] "GET /api/graph/%20?min_score=85 HTTP/1.1" 200 -
2024-11-25 23:29:49,761 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:49,796 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:49,812 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:49,812 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:49,812 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 78.0
2024-11-25 23:29:49,812 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 78.0}
2024-11-25 23:29:49,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:49,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:49,857 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:49,857 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:49,857 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 76.0
2024-11-25 23:29:49,857 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 76.0}
2024-11-25 23:29:49,889 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:49] "GET /api/graph/%20?min_score=78 HTTP/1.1" 200 -
2024-11-25 23:29:49,921 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:49,922 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:49,922 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 81.0
2024-11-25 23:29:49,923 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 81.0}
2024-11-25 23:29:50,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:29:50,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:29:50,016 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:50] "GET /api/graph/%20?min_score=81 HTTP/1.1" 200 -
2024-11-25 23:29:50,016 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:50] "GET /api/graph/%20?min_score=76 HTTP/1.1" 200 -
2024-11-25 23:29:50,016 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:29:50] "[36mGET /static/assets/images/cr7.jpg HTTP/1.1[0m" 304 -
2024-11-25 23:29:59,953 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:29:59,985 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:00,014 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:00,017 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:00,017 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:00,032 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:00,120 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,120 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,120 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 70.0
2024-11-25 23:30:00,120 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 70.0}
2024-11-25 23:30:00,181 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=70 HTTP/1.1" 200 -
2024-11-25 23:30:00,222 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,250 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,273 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,273 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,278 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 68.0
2024-11-25 23:30:00,279 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 75.0
2024-11-25 23:30:00,279 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 68.0}
2024-11-25 23:30:00,280 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 75.0}
2024-11-25 23:30:00,345 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,345 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,345 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,346 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,346 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 71.0
2024-11-25 23:30:00,347 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 74.0
2024-11-25 23:30:00,347 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 71.0}
2024-11-25 23:30:00,347 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 74.0}
2024-11-25 23:30:00,407 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:00,407 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:00,408 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 72.0
2024-11-25 23:30:00,408 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 72.0}
2024-11-25 23:30:00,439 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=68 HTTP/1.1" 200 -
2024-11-25 23:30:00,471 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=71 HTTP/1.1" 200 -
2024-11-25 23:30:00,504 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=72 HTTP/1.1" 200 -
2024-11-25 23:30:00,508 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=74 HTTP/1.1" 200 -
2024-11-25 23:30:00,509 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:00] "GET /api/graph/%20?min_score=75 HTTP/1.1" 200 -
2024-11-25 23:30:01,732 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:01,780 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:01,795 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:01,796 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 66.0
2024-11-25 23:30:01,796 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 66.0}
2024-11-25 23:30:01,859 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:01] "GET /api/graph/%20?min_score=66 HTTP/1.1" 200 -
2024-11-25 23:30:02,046 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:02,046 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:02,078 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:02,078 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:02,094 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:02,142 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:02,142 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:02,142 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 63.0
2024-11-25 23:30:02,142 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 63.0}
2024-11-25 23:30:02,174 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:02,178 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:02,178 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 57.0
2024-11-25 23:30:02,178 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 57.0}
2024-11-25 23:30:02,206 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:02,206 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:02,206 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 53.0
2024-11-25 23:30:02,206 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 53.0}
2024-11-25 23:30:02,238 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:02,238 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:30:02,238 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:02,238 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 54.0
2024-11-25 23:30:02,254 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 54.0}
2024-11-25 23:30:02,263 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:02] "GET /api/graph/%20?min_score=63 HTTP/1.1" 200 -
2024-11-25 23:30:02,270 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:02,270 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:02,270 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 61.0
2024-11-25 23:30:02,274 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 61.0}
2024-11-25 23:30:02,329 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 23:30:02,330 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:02] "GET /api/graph/%20?min_score=57 HTTP/1.1" 200 -
2024-11-25 23:30:02,372 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-25 23:30:02,376 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:02] "GET /api/graph/%20?min_score=53 HTTP/1.1" 200 -
2024-11-25 23:30:02,428 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-25 23:30:02,440 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:02] "GET /api/graph/%20?min_score=54 HTTP/1.1" 200 -
2024-11-25 23:30:02,468 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:30:02,468 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:02] "GET /api/graph/%20?min_score=61 HTTP/1.1" 200 -
2024-11-25 23:30:03,443 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,491 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:03,491 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:03,507 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-25 23:30:03,507 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-25 23:30:03,565 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:30:03,565 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:03] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-25 23:30:03,828 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,828 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,891 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:03,891 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:03,891 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 51.0
2024-11-25 23:30:03,891 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 51.0}
2024-11-25 23:30:03,891 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,907 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,923 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:03,924 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:03,924 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 50.0
2024-11-25 23:30:03,924 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 50.0}
2024-11-25 23:30:03,952 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:03,955 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:30:03,955 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:03] "GET /api/graph/%20?min_score=51 HTTP/1.1" 200 -
2024-11-25 23:30:04,024 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:04,024 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:04,024 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 45.0
2024-11-25 23:30:04,025 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 45.0}
2024-11-25 23:30:04,040 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:04,041 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:04,041 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 44.0
2024-11-25 23:30:04,042 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 44.0}
2024-11-25 23:30:04,177 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:04,178 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:04,178 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 46.0
2024-11-25 23:30:04,179 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 46.0}
2024-11-25 23:30:04,180 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 23 relaciones cumplen el criterio de similitud
2024-11-25 23:30:04,181 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:30:04,182 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:04] "GET /api/graph/%20?min_score=44 HTTP/1.1" 200 -
2024-11-25 23:30:04,183 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:04] "GET /api/graph/%20?min_score=50 HTTP/1.1" 200 -
2024-11-25 23:30:04,184 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 19 relaciones cumplen el criterio de similitud
2024-11-25 23:30:04,185 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:04] "GET /api/graph/%20?min_score=45 HTTP/1.1" 200 -
2024-11-25 23:30:04,247 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 18 relaciones cumplen el criterio de similitud
2024-11-25 23:30:04,248 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:04] "GET /api/graph/%20?min_score=46 HTTP/1.1" 200 -
2024-11-25 23:30:05,275 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,328 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:05,328 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:05,328 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 43.0
2024-11-25 23:30:05,328 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 43.0}
2024-11-25 23:30:05,391 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 28 relaciones cumplen el criterio de similitud
2024-11-25 23:30:05,391 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:05] "GET /api/graph/%20?min_score=43 HTTP/1.1" 200 -
2024-11-25 23:30:05,699 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,775 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:05,775 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:05,775 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 41.0
2024-11-25 23:30:05,775 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 41.0}
2024-11-25 23:30:05,790 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,800 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,841 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 33 relaciones cumplen el criterio de similitud
2024-11-25 23:30:05,843 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:05] "GET /api/graph/%20?min_score=41 HTTP/1.1" 200 -
2024-11-25 23:30:05,867 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,871 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:05,882 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:05,903 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:05,935 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:05,946 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:06,014 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:06,014 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 40.0
2024-11-25 23:30:06,061 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:06,077 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 40.0}
2024-11-25 23:30:06,079 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:06,094 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 39.0
2024-11-25 23:30:06,094 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 39.0}
2024-11-25 23:30:06,103 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:06,103 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 38.0
2024-11-25 23:30:06,104 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 35.0
2024-11-25 23:30:06,129 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 38.0}
2024-11-25 23:30:06,131 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 35.0}
2024-11-25 23:30:06,159 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 40 relaciones cumplen el criterio de similitud
2024-11-25 23:30:06,160 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:06] "GET /api/graph/%20?min_score=39 HTTP/1.1" 200 -
2024-11-25 23:30:06,192 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 37 relaciones cumplen el criterio de similitud
2024-11-25 23:30:06,232 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 47 relaciones cumplen el criterio de similitud
2024-11-25 23:30:06,242 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:06] "GET /api/graph/%20?min_score=40 HTTP/1.1" 200 -
2024-11-25 23:30:06,244 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:06] "GET /api/graph/%20?min_score=38 HTTP/1.1" 200 -
2024-11-25 23:30:06,293 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 74 relaciones cumplen el criterio de similitud
2024-11-25 23:30:06,295 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:06] "GET /api/graph/%20?min_score=35 HTTP/1.1" 200 -
2024-11-25 23:30:06,873 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:06,956 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:07,069 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:07,070 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-25 23:30:07,072 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-25 23:30:07,164 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-25 23:30:07,167 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:07] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-25 23:30:07,867 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:07,920 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:07,978 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:08,028 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,079 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 32.0
2024-11-25 23:30:08,141 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:08,203 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:08,203 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:08,210 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:08,386 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 32.0}
2024-11-25 23:30:08,527 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 121 relaciones cumplen el criterio de similitud
2024-11-25 23:30:08,559 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:08,618 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:08,674 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:08,678 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,681 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:08] "GET /api/graph/%20?min_score=32 HTTP/1.1" 200 -
2024-11-25 23:30:08,700 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:08,735 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,735 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,736 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 29.0
2024-11-25 23:30:08,761 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 29.0}
2024-11-25 23:30:08,841 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 30.0
2024-11-25 23:30:08,842 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 30.0}
2024-11-25 23:30:08,849 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 31.0
2024-11-25 23:30:08,849 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,850 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 31.0}
2024-11-25 23:30:08,852 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 28.0
2024-11-25 23:30:08,853 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 28.0}
2024-11-25 23:30:08,902 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:08,902 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:08,903 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 26.0
2024-11-25 23:30:08,903 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 26.0}
2024-11-25 23:30:08,942 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 183 relaciones cumplen el criterio de similitud
2024-11-25 23:30:08,972 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:08] "GET /api/graph/%20?min_score=30 HTTP/1.1" 200 -
2024-11-25 23:30:08,984 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 266 relaciones cumplen el criterio de similitud
2024-11-25 23:30:09,006 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:09] "GET /api/graph/%20?min_score=28 HTTP/1.1" 200 -
2024-11-25 23:30:09,030 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 380 relaciones cumplen el criterio de similitud
2024-11-25 23:30:09,030 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:09] "GET /api/graph/%20?min_score=26 HTTP/1.1" 200 -
2024-11-25 23:30:09,075 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 223 relaciones cumplen el criterio de similitud
2024-11-25 23:30:09,083 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:09] "GET /api/graph/%20?min_score=29 HTTP/1.1" 200 -
2024-11-25 23:30:09,121 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 145 relaciones cumplen el criterio de similitud
2024-11-25 23:30:09,125 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:09] "GET /api/graph/%20?min_score=31 HTTP/1.1" 200 -
2024-11-25 23:30:50,523 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,523 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,588 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,618 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 30.0
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 27.0
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 30.0}
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 31.0
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 27.0}
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,810 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 31.0}
2024-11-25 23:30:50,819 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 41.0
2024-11-25 23:30:50,819 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 28.0
2024-11-25 23:30:50,819 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 41.0}
2024-11-25 23:30:50,819 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 28.0}
2024-11-25 23:30:50,987 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:50,987 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:50,987 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 37.0
2024-11-25 23:30:50,987 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 37.0}
2024-11-25 23:30:51,000 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 33 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,000 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=41 HTTP/1.1" 200 -
2024-11-25 23:30:51,042 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 183 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,047 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 145 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,062 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 266 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,077 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 316 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,080 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 53 relaciones cumplen el criterio de similitud
2024-11-25 23:30:51,099 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=30 HTTP/1.1" 200 -
2024-11-25 23:30:51,103 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=31 HTTP/1.1" 200 -
2024-11-25 23:30:51,112 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=27 HTTP/1.1" 200 -
2024-11-25 23:30:51,126 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=37 HTTP/1.1" 200 -
2024-11-25 23:30:51,135 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:51] "GET /api/graph/%20?min_score=28 HTTP/1.1" 200 -
2024-11-25 23:30:52,608 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:52,674 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:52,674 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:52,795 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 45.0
2024-11-25 23:30:52,811 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 45.0}
2024-11-25 23:30:52,876 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 19 relaciones cumplen el criterio de similitud
2024-11-25 23:30:52,877 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:52] "GET /api/graph/%20?min_score=45 HTTP/1.1" 200 -
2024-11-25 23:30:52,920 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:52,936 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:52,951 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:52,967 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:52,982 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:52,982 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:52,982 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 55.0
2024-11-25 23:30:52,982 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 55.0}
2024-11-25 23:30:53,014 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:53,039 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:53,039 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 48.0
2024-11-25 23:30:53,041 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 48.0}
2024-11-25 23:30:53,051 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:53,051 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:53,051 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 51.0
2024-11-25 23:30:53,052 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 51.0}
2024-11-25 23:30:53,091 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:53,118 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:53,119 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 65.0
2024-11-25 23:30:53,119 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 65.0}
2024-11-25 23:30:53,123 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:30:53,123 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:53] "GET /api/graph/%20?min_score=51 HTTP/1.1" 200 -
2024-11-25 23:30:53,172 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 23:30:53,179 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:53] "GET /api/graph/%20?min_score=55 HTTP/1.1" 200 -
2024-11-25 23:30:53,202 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 12 relaciones cumplen el criterio de similitud
2024-11-25 23:30:53,203 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:53] "GET /api/graph/%20?min_score=48 HTTP/1.1" 200 -
2024-11-25 23:30:53,272 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:30:53,272 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:53] "GET /api/graph/%20?min_score=65 HTTP/1.1" 200 -
2024-11-25 23:30:53,739 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:53,809 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:53,809 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:53,810 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 57.0
2024-11-25 23:30:53,810 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 57.0}
2024-11-25 23:30:53,868 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 23:30:53,868 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:53] "GET /api/graph/%20?min_score=57 HTTP/1.1" 200 -
2024-11-25 23:30:54,380 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:54,441 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:54,441 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:54,442 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 70.0
2024-11-25 23:30:54,442 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 70.0}
2024-11-25 23:30:54,499 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:54] "GET /api/graph/%20?min_score=70 HTTP/1.1" 200 -
2024-11-25 23:30:54,719 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:54,735 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:54,814 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:54,814 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:54,814 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:54,814 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:54,814 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 73.0
2024-11-25 23:30:54,814 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 76.0
2024-11-25 23:30:54,814 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 73.0}
2024-11-25 23:30:54,814 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 76.0}
2024-11-25 23:30:54,926 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:54] "GET /api/graph/%20?min_score=76 HTTP/1.1" 200 -
2024-11-25 23:30:54,926 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:54] "GET /api/graph/%20?min_score=73 HTTP/1.1" 200 -
2024-11-25 23:30:55,968 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:30:56,032 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:30:56,032 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:30:56,032 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:30:56] "[36mGET /static/assets/images/cr7.jpg HTTP/1.1[0m" 304 -
2024-11-25 23:31:06,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,601 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,601 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,617 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,617 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,617 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 72.0
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 75.0
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:06,951 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 70.0
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 72.0}
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 70.0}
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 75.0}
2024-11-25 23:31:06,967 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,967 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 66.0
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 62.0
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 74.0
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 66.0}
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 62.0}
2024-11-25 23:31:06,967 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 74.0}
2024-11-25 23:31:07,190 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=75 HTTP/1.1" 200 -
2024-11-25 23:31:07,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=72 HTTP/1.1" 200 -
2024-11-25 23:31:07,191 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:31:07,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=66 HTTP/1.1" 200 -
2024-11-25 23:31:07,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=62 HTTP/1.1" 200 -
2024-11-25 23:31:07,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=70 HTTP/1.1" 200 -
2024-11-25 23:31:07,191 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:07] "GET /api/graph/%20?min_score=74 HTTP/1.1" 200 -
2024-11-25 23:31:08,701 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,717 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,748 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,748 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,779 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,795 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:08,795 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:08,826 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:08,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:08,844 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 60.0
2024-11-25 23:31:08,844 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:08,864 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:08,864 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 60.0}
2024-11-25 23:31:08,864 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 55.0
2024-11-25 23:31:08,864 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 55.0}
2024-11-25 23:31:08,864 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:08,864 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 58.0
2024-11-25 23:31:08,873 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 58.0}
2024-11-25 23:31:08,906 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:08,906 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:08,906 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 59.0
2024-11-25 23:31:08,906 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 59.0}
2024-11-25 23:31:09,113 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:09,113 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:09,113 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:09,113 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 53.0
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 53.0}
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-25 23:31:09,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=60 HTTP/1.1" 200 -
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,113 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,113 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=55 HTTP/1.1" 200 -
2024-11-25 23:31:09,128 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=59 HTTP/1.1" 200 -
2024-11-25 23:31:09,185 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,187 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=53 HTTP/1.1" 200 -
2024-11-25 23:31:09,229 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:31:09,230 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:09] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-25 23:31:10,697 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:10,744 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:10,744 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:10,744 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 50.0
2024-11-25 23:31:10,744 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 50.0}
2024-11-25 23:31:10,764 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:10,776 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:10,808 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:10,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:10,879 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:10,879 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:10,879 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:10,879 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:10,879 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:31:10,879 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 51.0
2024-11-25 23:31:10,879 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 46.0
2024-11-25 23:31:10,879 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:10] "GET /api/graph/%20?min_score=50 HTTP/1.1" 200 -
2024-11-25 23:31:10,879 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 51.0}
2024-11-25 23:31:10,879 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 46.0}
2024-11-25 23:31:10,943 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:10,944 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:10,944 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 45.0
2024-11-25 23:31:10,945 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 45.0}
2024-11-25 23:31:10,950 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:10,950 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:10,952 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 47.0
2024-11-25 23:31:10,977 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 47.0}
2024-11-25 23:31:10,993 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-25 23:31:10,994 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:10] "GET /api/graph/%20?min_score=51 HTTP/1.1" 200 -
2024-11-25 23:31:11,025 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 19 relaciones cumplen el criterio de similitud
2024-11-25 23:31:11,027 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:11] "GET /api/graph/%20?min_score=45 HTTP/1.1" 200 -
2024-11-25 23:31:11,056 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 18 relaciones cumplen el criterio de similitud
2024-11-25 23:31:11,057 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:11] "GET /api/graph/%20?min_score=46 HTTP/1.1" 200 -
2024-11-25 23:31:11,087 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 14 relaciones cumplen el criterio de similitud
2024-11-25 23:31:11,088 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:11] "GET /api/graph/%20?min_score=47 HTTP/1.1" 200 -
2024-11-25 23:31:32,655 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:32,735 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:32,735 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:32,735 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:31:32,750 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-25 23:31:32,750 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-25 23:31:33,326 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 23:31:33,326 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:33] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-25 23:31:37,454 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:37,517 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:37,517 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:37,517 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:31:37,517 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Tutela'}
2024-11-25 23:31:37,517 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^T-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Tutela'}
2024-11-25 23:31:38,216 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 23:31:38,216 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:38] "[35m[1mGET /api/search?tipo=Tutela HTTP/1.1[0m" 6 -
2024-11-25 23:31:49,420 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:49,545 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:49,545 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:49,545 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:31:49,545 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 23:31:49,545 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 23:31:50,125 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 23:31:50,125 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:50] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 23:31:53,389 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:31:53,534 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:31:53,534 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:31:53,534 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:31:53,534 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:31:53,534 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:31:54,335 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:31:54,350 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:31:54] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:32:02,084 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:32:02,139 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:32:02,139 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:32:02,139 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:32:02,139 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 23:32:02,139 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 23:32:02,626 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 23:32:02,628 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:32:02] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 23:32:06,922 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:32:06,982 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:32:06,982 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:32:06,985 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:32:06,985 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:32:06,985 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:32:07,795 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:32:07,796 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:32:07] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:32:09,639 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:32:09,700 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:32:09,700 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:32:09,701 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:32:09,702 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2023'}
2024-11-25 23:32:09,702 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2023'}
2024-11-25 23:32:10,049 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 23:32:10,049 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:32:10] "[35m[1mGET /api/search?anio=2023 HTTP/1.1[0m" 2 -
2024-11-25 23:33:13,054 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:13,201 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:13,201 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:13,201 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:13,201 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2022'}
2024-11-25 23:33:13,212 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2022'}
2024-11-25 23:33:13,670 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 23:33:13,673 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:13] "[1mGET /api/search?anio=2022 HTTP/1.1[0m" 1 -
2024-11-25 23:33:21,673 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:21,737 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:21,737 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:21,737 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:21,737 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2021'}
2024-11-25 23:33:21,737 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2021'}
2024-11-25 23:33:22,314 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 23:33:22,314 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:22] "[35m[1mGET /api/search?anio=2021 HTTP/1.1[0m" 6 -
2024-11-25 23:33:30,895 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:30,967 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:30,967 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:30,967 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:30,967 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:33:30,967 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:33:31,769 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:33:31,785 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:31] "[35m[1mGET /api/search?anio=203 HTTP/1.1[0m" 21 -
2024-11-25 23:33:34,737 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:34,801 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:34,801 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:34,801 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:34,801 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:33:34,801 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:33:35,614 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:33:35,614 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:35] "[35m[1mGET /api/search?anio=2033 HTTP/1.1[0m" 21 -
2024-11-25 23:33:49,135 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:49,298 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:49,298 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:49,298 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:49,298 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 23:33:49,298 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 23:33:49,766 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 23:33:49,766 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:49] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 23:33:55,516 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:33:55,580 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:33:55,580 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:33:55,580 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:33:55,580 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:33:55,580 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:33:56,394 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:33:56,401 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:33:56] "[35m[1mGET /api/search?anio=2025 HTTP/1.1[0m" 21 -
2024-11-25 23:43:59,393 - werkzeug - INFO - [_internal.py:96] -  * Detected change in 'C:\\Users\\JsBeltran\\OneDrive - ucentral.edu.co\\Bigdata\\FlaskAPI-mongodb-main\\FlaskAPI-mongodb-main\\utils\\helpers.py', reloading
2024-11-25 23:43:59,398 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-25 23:43:59,968 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-25 23:44:03,329 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-25 23:44:03,334 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-25 23:44:03,511 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-25 23:44:05,125 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-25 23:44:05,241 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-25 23:44:05,241 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x0000018C829B0C80>
2024-11-25 23:44:05,859 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-25 23:44:05,919 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-25 23:44:05,920 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-25 23:44:05,930 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-25 23:44:05,934 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-25 23:49:49,790 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:50,244 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:50,245 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:50,245 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 23:49:50,253 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:50] "GET / HTTP/1.1" 200 -
2024-11-25 23:49:51,502 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:51,562 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:51,562 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:51,587 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:51,648 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:51,649 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:51,676 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:51] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 23:49:51,733 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:51] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 23:49:51,822 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:51,829 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:51,883 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:51,884 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:51,885 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:51] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 23:49:51,945 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:52,005 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:52,008 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:52,009 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:52] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 23:49:52,099 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:52,099 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:52,101 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:52] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 23:49:53,618 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:53,638 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:49:53,712 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:53,712 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:49:53,712 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:53,712 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:49:53,712 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 23:49:53,712 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 23:49:53,712 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 23:49:53,890 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:49:53,902 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:53] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 23:49:54,066 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 23:49:54,068 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:49:54] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 23:50:27,051 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:27,169 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:27,169 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:27,169 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:27,169 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 23:50:27,169 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 23:50:27,760 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 23:50:27,764 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:27] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 23:50:34,407 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:34,460 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:34,460 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:34,460 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:34,460 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-25 23:50:34,460 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-25 23:50:35,047 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-25 23:50:35,047 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:35] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-25 23:50:39,888 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:40,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:40,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:40,013 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:40,013 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Tutela'}
2024-11-25 23:50:40,013 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^T-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Tutela'}
2024-11-25 23:50:40,701 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-25 23:50:40,714 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:40] "[35m[1mGET /api/search?tipo=Tutela HTTP/1.1[0m" 6 -
2024-11-25 23:50:45,357 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:45,420 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:45,420 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:45,420 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:45,420 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:45,420 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:46,237 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:46,244 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:46] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:50:48,640 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:48,701 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:48,701 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:48,701 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:48,703 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:48,703 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:49,489 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:49,513 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:49,521 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:49] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 23:50:49,553 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:49,580 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:49,583 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:49,583 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:49,584 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:49,732 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:49,738 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:49] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 23:50:49,798 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:49,857 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:49,857 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:49,857 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:49,858 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 23:50:49,858 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 23:50:49,970 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 23:50:49,970 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:49] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 23:50:51,494 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:51,558 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:51,558 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:51,558 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:51,558 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 23:50:51,558 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-25 23:50:51,907 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 23:50:51,907 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:51] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 23:50:54,103 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:54,155 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:54,155 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:54,155 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:54,155 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:54,155 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:54,974 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:54,990 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:54] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:50:55,080 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:55,187 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:55,187 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:55,187 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:55,187 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:55,187 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:55,437 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:55,443 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:55] "[35m[1mGET /api/search?anio=201 HTTP/1.1[0m" 21 -
2024-11-25 23:50:55,496 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:55,554 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:55,556 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:55,556 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:55,556 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 23:50:55,556 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 23:50:55,671 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 23:50:55,671 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:55] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 23:50:56,514 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:56,564 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:56,564 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:56,564 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:56,564 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:56,564 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:56,956 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:56,956 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:56] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:50:57,180 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:57,233 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:57,233 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:57,233 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:57,233 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 23:50:57,233 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 23:50:57,357 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 23:50:57,358 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:57] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 23:50:58,487 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:58,550 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:58,550 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:58,550 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:58,550 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:50:58,550 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:50:58,906 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:50:58,962 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:50:58,962 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:50:58,962 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:50:58,962 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 23:50:58,962 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 23:50:59,145 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:50:59,170 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:59] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:50:59,762 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 23:50:59,764 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:50:59] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 23:51:00,674 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:51:00,732 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:51:00,732 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:51:00,732 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:51:00,732 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:51:00,732 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:51:01,545 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:51:01,545 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:51:01] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 23:51:09,879 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:51:10,006 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:51:10,006 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:51:10,006 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:51:10,007 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:51:10,007 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:51:10,592 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:51:10,652 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:51:10,652 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:51:10,652 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:51:10,652 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 23:51:10,652 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2015'}
2024-11-25 23:51:10,769 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 23:51:10,772 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:51:10] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 23:51:10,821 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:51:10,830 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:51:10] "[35m[1mGET /api/search?anio=201 HTTP/1.1[0m" 21 -
2024-11-25 23:51:19,497 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:51:19,670 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:51:19,670 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:51:19,670 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:51:19,670 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:51:19,670 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:51:20,487 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:51:20,503 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:51:20] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 23:51:36,770 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:51:36,865 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:51:36,865 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:51:36,865 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:51:36,865 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:51:36,865 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:51:37,673 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:51:37,686 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:51:37] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 23:52:20,404 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:20,548 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:20,548 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:20,548 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 48.0
2024-11-25 23:52:20,548 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 48.0}
2024-11-25 23:52:20,611 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 12 relaciones cumplen el criterio de similitud
2024-11-25 23:52:20,611 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:20] "GET /api/graph/%20?min_score=48 HTTP/1.1" 200 -
2024-11-25 23:52:28,362 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:28,428 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:28,428 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:28,428 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:28,428 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:52:28,428 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:52:29,246 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:52:29,257 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:29] "[35m[1mGET /api/search?anio=209 HTTP/1.1[0m" 21 -
2024-11-25 23:52:30,732 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:30,797 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:30,798 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:30,798 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:30,799 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:52:30,800 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:52:31,494 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:52:31,501 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:31] "[35m[1mGET /api/search?anio=209 HTTP/1.1[0m" 21 -
2024-11-25 23:52:32,999 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:33,127 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:33,127 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:33,127 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:33,127 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:52:33,127 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:52:33,811 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:52:33,827 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:33] "[35m[1mGET /api/search?anio=209 HTTP/1.1[0m" 21 -
2024-11-25 23:52:35,119 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:35,182 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:35,182 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:35,182 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:35,182 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2009'}
2024-11-25 23:52:35,182 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2009'}
2024-11-25 23:52:35,295 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 23:52:35,295 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:35] "[1mGET /api/search?anio=2009 HTTP/1.1[0m" 1 -
2024-11-25 23:52:41,373 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:41,437 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:41,437 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:41,437 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:41,437 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:52:41,437 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:52:41,482 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:52:41,533 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:52:41,533 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:52:41,533 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-25 23:52:41,533 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-25 23:52:41,533 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-25 23:52:42,249 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:52:42,249 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:42] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 23:52:42,353 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 23:52:42,362 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:52:42] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 23:56:37,328 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:37,550 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:56:37,550 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:56:37,550 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 23:56:37,553 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:37] "GET / HTTP/1.1" 200 -
2024-11-25 23:56:38,806 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:38,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:38,889 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:56:38,889 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:56:38,889 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:38] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 23:56:39,113 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:39,149 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:39,155 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:39,172 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:56:39,172 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:56:39,174 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:39] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 23:56:39,202 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:56:39,202 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:56:39,202 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:39] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 23:56:39,426 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:56:39,426 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:56:39,427 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:39] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 23:56:58,061 - neo4j.io - ERROR - [_bolt.py:1037] - [#CCC2]  _: <CONNECTION> error: Failed to read from defunct connection IPv4Address(('f087ea43.databases.neo4j.io', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 23:56:58,063 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Failed to read from defunct connection IPv4Address(('f087ea43.databases.neo4j.io', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687)))
2024-11-25 23:56:58,063 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 23:56:58,063 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 23:56:58,064 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:56:58] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 23:56:59,708 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:56:59,734 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:00,118 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:00,118 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:00,118 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 23:57:00,133 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 23:57:00,133 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:00,133 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:00,133 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 23:57:00,294 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:57:00,308 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:00] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 23:57:00,488 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 23:57:00,492 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:00] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 23:57:21,696 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:21,801 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:21,801 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:21,802 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 23:57:21,802 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:21] "GET / HTTP/1.1" 200 -
2024-11-25 23:57:23,106 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:23,163 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:23,163 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:23,164 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:23] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 23:57:23,336 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:23,365 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:23,391 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:23,392 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:23,393 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:23] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 23:57:23,400 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:23,419 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:23,423 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:23,423 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:23,424 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:23] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 23:57:23,455 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:23,456 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:23,457 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:23] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 23:57:23,487 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:23,488 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:23,490 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:23] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 23:57:25,081 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:25,118 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 23:57:25,145 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:25,145 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:25,145 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-25 23:57:25,145 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-25 23:57:25,208 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 23:57:25,208 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 23:57:25,208 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-25 23:57:25,304 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-25 23:57:25,320 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:25] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-25 23:57:25,590 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-25 23:57:25,607 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 23:57:25] "GET /api/stats HTTP/1.1" 200 -
2024-11-26 00:03:43,548 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:02,795 - neo4j.io - ERROR - [_bolt.py:1037] - [#CC96]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-26 00:04:02,797 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-26 00:04:02,797 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-26 00:04:02,797 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-26 00:04:02,798 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-26 00:04:02,798 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-26 00:04:02,799 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:02] "GET / HTTP/1.1" 200 -
2024-11-26 00:04:04,302 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:04,302 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:04,434 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:04,486 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:04,486 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:04,916 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:04,916 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:04,916 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:04,917 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:04,918 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:04] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-26 00:04:04,918 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:04] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-26 00:04:04,929 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:04,929 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:04,930 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:04,931 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:04,931 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:04] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-26 00:04:04,932 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:04] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-26 00:04:04,933 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:04,934 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:04,935 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:04] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-26 00:04:06,526 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:06,576 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:06,576 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:06,576 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 0.0
2024-11-26 00:04:06,576 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 0.0}
2024-11-26 00:04:06,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:06,671 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:06,671 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:06,671 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-26 00:04:06,795 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:04:06,801 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:06] "GET /api/graph/%20?min_score=0 HTTP/1.1" 200 -
2024-11-26 00:04:07,033 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-26 00:04:07,035 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:07] "GET /api/stats HTTP/1.1" 200 -
2024-11-26 00:04:08,702 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:08,782 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:08,816 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:08,817 - routes.search - INFO - [search.py:134] - Obteniendo estad√≠sticas
2024-11-26 00:04:09,170 - routes.search - INFO - [search.py:162] - Estad√≠sticas generadas exitosamente
2024-11-26 00:04:09,170 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:09] "GET /api/stats HTTP/1.1" 200 -
2024-11-26 00:04:24,562 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:24,652 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:24,666 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:24,667 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:04:24,667 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-26 00:04:24,667 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-26 00:04:25,255 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-26 00:04:25,260 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:25] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-26 00:04:31,076 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:31,157 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:31,166 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:31,167 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:04:31,167 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-26 00:04:31,168 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-26 00:04:31,748 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-26 00:04:31,751 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:31] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-26 00:04:35,983 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:36,207 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:36,207 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:36,208 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:04:36,209 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Tutela'}
2024-11-26 00:04:36,209 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^T-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Tutela'}
2024-11-26 00:04:36,905 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-26 00:04:36,911 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:36] "[35m[1mGET /api/search?tipo=Tutela HTTP/1.1[0m" 6 -
2024-11-26 00:04:43,241 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:43,326 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:43,341 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:43,341 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:04:43,342 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:04:43,342 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:04:44,158 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:04:44,170 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:44] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:04:49,911 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:04:50,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:04:50,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:04:50,013 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:04:50,013 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-26 00:04:50,013 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-26 00:04:50,484 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:04:50,484 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:04:50] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-26 00:05:16,749 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:16,829 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:16,829 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:16,829 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:16,829 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:05:16,829 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:05:17,639 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:05:17,639 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:17] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:05:31,923 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:32,002 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:32,002 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:32,002 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:32,002 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2009'}
2024-11-26 00:05:32,002 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2009'}
2024-11-26 00:05:32,235 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-26 00:05:32,235 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:32] "[1mGET /api/search?anio=2009 HTTP/1.1[0m" 1 -
2024-11-26 00:05:38,436 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:38,483 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:38,483 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:38,483 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:38,483 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2010'}
2024-11-26 00:05:38,483 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2010'}
2024-11-26 00:05:38,960 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-26 00:05:38,960 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:38] "[1mGET /api/search?anio=2010 HTTP/1.1[0m" 1 -
2024-11-26 00:05:45,291 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:45,388 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:45,388 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:45,388 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:45,388 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2020'}
2024-11-26 00:05:45,388 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2020'}
2024-11-26 00:05:45,858 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:05:45,858 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:45] "[35m[1mGET /api/search?anio=2020 HTTP/1.1[0m" 5 -
2024-11-26 00:05:51,391 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:51,482 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:51,482 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:51,482 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:51,482 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2021'}
2024-11-26 00:05:51,482 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2021'}
2024-11-26 00:05:52,049 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 6
2024-11-26 00:05:52,049 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:52] "[35m[1mGET /api/search?anio=2021 HTTP/1.1[0m" 6 -
2024-11-26 00:05:59,111 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:05:59,219 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:05:59,219 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:05:59,219 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:05:59,219 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2022'}
2024-11-26 00:05:59,219 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2022'}
2024-11-26 00:05:59,685 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-26 00:05:59,685 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:05:59] "[1mGET /api/search?anio=2022 HTTP/1.1[0m" 1 -
2024-11-26 00:06:06,608 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:06,672 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:06,672 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:06,672 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:06,672 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2023'}
2024-11-26 00:06:06,672 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2023'}
2024-11-26 00:06:07,025 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-26 00:06:07,026 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:07] "[35m[1mGET /api/search?anio=2023 HTTP/1.1[0m" 2 -
2024-11-26 00:06:12,292 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:12,403 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:12,403 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:12,403 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:12,404 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-26 00:06:12,404 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-26 00:06:12,882 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:06:12,888 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:12] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-26 00:06:17,640 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:17,799 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:17,799 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:17,799 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:17,799 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:06:17,799 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:06:18,625 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:06:18,633 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:18] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:06:30,138 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:30,290 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:30,391 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:30,391 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:30,391 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:30,391 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'copn'}
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'copnt'}
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'copn'}}
2024-11-26 00:06:30,391 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'copnt'}}
2024-11-26 00:06:30,519 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-26 00:06:30,519 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:30] "[35m[1mGET /api/search?texto=copn HTTP/1.1[0m" 0 -
2024-11-26 00:06:30,519 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-26 00:06:30,519 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:30] "[35m[1mGET /api/search?texto=copnt HTTP/1.1[0m" 0 -
2024-11-26 00:06:31,019 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:31,086 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:31,087 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:31,087 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:31,088 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:06:31,088 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:06:31,899 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:06:31,907 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:31] "[35m[1mGET /api/search?texto=co HTTP/1.1[0m" 21 -
2024-11-26 00:06:32,698 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:32,759 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:32,760 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:32,760 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:32,760 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'coo'}
2024-11-26 00:06:32,761 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'coo'}}
2024-11-26 00:06:32,876 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-26 00:06:32,876 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:32] "[35m[1mGET /api/search?texto=coo HTTP/1.1[0m" 0 -
2024-11-26 00:06:33,404 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:33,462 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:33,463 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:33,463 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:33,463 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:06:33,464 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:06:34,155 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:06:34,165 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:34] "[35m[1mGET /api/search?texto=co HTTP/1.1[0m" 21 -
2024-11-26 00:06:34,946 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:34,999 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:34,999 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:34,999 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:34,999 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'cons'}
2024-11-26 00:06:34,999 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'cons'}}
2024-11-26 00:06:35,474 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:06:35,481 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:35] "[35m[1mGET /api/search?texto=cons HTTP/1.1[0m" 21 -
2024-11-26 00:06:36,016 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:36,075 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:36,076 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:36,076 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:36,077 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'constui'}
2024-11-26 00:06:36,077 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'constui'}}
2024-11-26 00:06:36,194 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 0
2024-11-26 00:06:36,195 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:36] "[35m[1mGET /api/search?texto=constui HTTP/1.1[0m" 0 -
2024-11-26 00:06:38,922 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:38,982 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:38,982 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:38,982 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:38,982 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'constitucion'}
2024-11-26 00:06:38,982 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'constitucion'}}
2024-11-26 00:06:39,797 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:06:39,797 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:39] "[35m[1mGET /api/search?texto=constitucion HTTP/1.1[0m" 21 -
2024-11-26 00:06:53,924 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:06:54,064 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:06:54,067 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:06:54,067 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:06:54,067 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'tercera'}
2024-11-26 00:06:54,067 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'tercera'}}
2024-11-26 00:06:54,647 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:06:54,647 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:06:54] "[35m[1mGET /api/search?texto=tercera HTTP/1.1[0m" 5 -
2024-11-26 00:08:18,459 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:08:18,593 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:08:18,593 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:08:18,594 - routes.search - INFO - [search.py:27] - B√∫squeda de providencia espec√≠fica: A441-20
2024-11-26 00:08:18,702 - routes.search - INFO - [search.py:52] - Providencia encontrada: A441-20
2024-11-26 00:08:18,702 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:08:18] "GET /api/providencia/A441-20 HTTP/1.1" 200 -
2024-11-26 00:08:23,482 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:08:23,533 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:08:23,533 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:08:23,533 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:08:23,533 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'tercera'}
2024-11-26 00:08:23,533 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'tercera'}}
2024-11-26 00:08:24,125 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:08:24,138 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:08:24] "[35m[1mGET /api/search?texto=tercera HTTP/1.1[0m" 5 -
2024-11-26 00:08:29,269 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:08:29,333 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:08:29,333 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:08:29,333 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:08:29,333 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:08:29,333 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:08:30,142 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:08:30,157 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:08:30] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:29:46,007 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:30:05,433 - neo4j.io - ERROR - [_bolt.py:1037] - [#D1F4]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-26 00:30:05,434 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-26 00:30:05,434 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-26 00:30:05,434 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-26 00:30:05,434 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-26 00:30:05,434 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:30:05,434 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Constitucionalidad'}
2024-11-26 00:30:05,434 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^C-[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Constitucionalidad'}
2024-11-26 00:30:06,013 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 2
2024-11-26 00:30:06,016 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:30:06] "[35m[1mGET /api/search?tipo=Constitucionalidad HTTP/1.1[0m" 2 -
2024-11-26 00:30:43,223 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:30:43,746 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:30:43,746 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:30:43,746 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:30:43,746 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-26 00:30:43,746 - routes.search - INFO - [search.py:107] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-26 00:30:44,341 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 13
2024-11-26 00:30:44,343 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:30:44] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-26 00:30:50,170 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:30:50,343 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:30:50,343 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:30:50,343 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:30:50,345 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:30:50,345 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:30:51,147 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:30:51,169 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:30:51] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:30:56,020 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:30:56,215 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:30:56,231 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:30:56,231 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:30:56,232 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'anio': '2024'}
2024-11-26 00:30:56,232 - routes.search - INFO - [search.py:107] - Query final: {'anio': '2024'}
2024-11-26 00:30:56,701 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 5
2024-11-26 00:30:56,701 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:30:56] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-26 00:31:10,274 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:10,426 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:10,427 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:10,427 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:31:10,428 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:31:10,428 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:31:11,244 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:31:11,256 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:11] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:31:25,019 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:25,134 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:25,134 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:25,135 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 00:31:25,135 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 00:31:25,135 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 00:31:25,946 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 00:31:25,954 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:25] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 00:31:49,706 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:49,722 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:49,754 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:49,786 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:49,795 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:49,795 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:50,151 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,152 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,153 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 9.0
2024-11-26 00:31:50,153 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 9.0}
2024-11-26 00:31:50,182 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,182 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,183 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 8.0
2024-11-26 00:31:50,184 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 8.0}
2024-11-26 00:31:50,215 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,216 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,217 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 1.0
2024-11-26 00:31:50,218 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 1.0}
2024-11-26 00:31:50,347 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,347 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,347 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 2.0
2024-11-26 00:31:50,347 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 2.0}
2024-11-26 00:31:50,374 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,374 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,374 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 7.0
2024-11-26 00:31:50,374 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 7.0}
2024-11-26 00:31:50,421 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,429 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=8 HTTP/1.1" 200 -
2024-11-26 00:31:50,435 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:50,436 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:50,437 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 4.0
2024-11-26 00:31:50,438 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 4.0}
2024-11-26 00:31:50,490 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,508 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=7 HTTP/1.1" 200 -
2024-11-26 00:31:50,563 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,590 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,602 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=4 HTTP/1.1" 200 -
2024-11-26 00:31:50,630 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,655 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:50,691 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=2 HTTP/1.1" 200 -
2024-11-26 00:31:50,705 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=9 HTTP/1.1" 200 -
2024-11-26 00:31:50,778 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:50] "GET /api/graph/%20?min_score=1 HTTP/1.1" 200 -
2024-11-26 00:31:52,003 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,154 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,154 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:52,154 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:52,154 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 11.0
2024-11-26 00:31:52,154 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 11.0}
2024-11-26 00:31:52,218 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:52,218 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:52,218 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 15.0
2024-11-26 00:31:52,218 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 15.0}
2024-11-26 00:31:52,357 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:52,361 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:52] "GET /api/graph/%20?min_score=11 HTTP/1.1" 200 -
2024-11-26 00:31:52,393 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:52,424 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:52] "GET /api/graph/%20?min_score=15 HTTP/1.1" 200 -
2024-11-26 00:31:52,834 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,868 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,883 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,890 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:31:52,909 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:52,910 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:52,910 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 17.0
2024-11-26 00:31:52,911 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 17.0}
2024-11-26 00:31:52,963 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:52,963 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:52,964 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 21.0
2024-11-26 00:31:52,964 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 21.0}
2024-11-26 00:31:53,024 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:53,024 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:31:53,026 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:53,026 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:31:53,027 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 18.0
2024-11-26 00:31:53,027 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 16.0
2024-11-26 00:31:53,028 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 18.0}
2024-11-26 00:31:53,028 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 16.0}
2024-11-26 00:31:53,076 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:53,093 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:53] "GET /api/graph/%20?min_score=17 HTTP/1.1" 200 -
2024-11-26 00:31:53,175 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:53,199 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:53] "GET /api/graph/%20?min_score=21 HTTP/1.1" 200 -
2024-11-26 00:31:53,235 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:53,296 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:31:53,320 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:53] "GET /api/graph/%20?min_score=16 HTTP/1.1" 200 -
2024-11-26 00:31:53,373 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:31:53] "GET /api/graph/%20?min_score=18 HTTP/1.1" 200 -
2024-11-26 00:32:07,842 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:07,851 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:07,965 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:07,965 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:07,967 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:07] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-26 00:32:07,992 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:07,992 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:07,994 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:07] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-26 00:32:18,452 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:18,594 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:18,594 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:18,595 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 18.0
2024-11-26 00:32:18,595 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 18.0}
2024-11-26 00:32:18,764 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:18,773 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:18] "GET /api/graph/%20?min_score=18 HTTP/1.1" 200 -
2024-11-26 00:32:19,207 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:19,217 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:19,271 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:19,271 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:19,271 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 17.0
2024-11-26 00:32:19,271 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 17.0}
2024-11-26 00:32:19,271 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:19,303 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:19,303 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:19,303 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 16.0
2024-11-26 00:32:19,303 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 16.0}
2024-11-26 00:32:19,318 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:19,318 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:19,430 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:19,430 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:19,488 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:19,488 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:19,505 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:19] "GET /api/graph/%20?min_score=17 HTTP/1.1" 200 -
2024-11-26 00:32:19,524 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:19] "GET /api/graph/%20?min_score=16 HTTP/1.1" 200 -
2024-11-26 00:32:19,524 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:19,526 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:19,526 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 15.0
2024-11-26 00:32:19,527 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 15.0}
2024-11-26 00:32:19,527 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:19,528 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 14.0
2024-11-26 00:32:19,528 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 14.0}
2024-11-26 00:32:19,531 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:19,531 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 13.0
2024-11-26 00:32:19,533 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 13.0}
2024-11-26 00:32:19,626 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:19,653 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:19,679 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:19] "GET /api/graph/%20?min_score=15 HTTP/1.1" 200 -
2024-11-26 00:32:19,680 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:19] "GET /api/graph/%20?min_score=14 HTTP/1.1" 200 -
2024-11-26 00:32:19,717 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:19,978 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:19] "GET /api/graph/%20?min_score=13 HTTP/1.1" 200 -
2024-11-26 00:32:20,295 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:20,370 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:20,370 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:20,371 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 10.0
2024-11-26 00:32:20,372 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 10.0}
2024-11-26 00:32:20,496 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:20,511 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:20] "GET /api/graph/%20?min_score=10 HTTP/1.1" 200 -
2024-11-26 00:32:21,451 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:21,546 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:21,546 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:21,568 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:21,568 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 11.0
2024-11-26 00:32:21,568 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 11.0}
2024-11-26 00:32:21,625 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:21,705 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:21,705 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 12.0
2024-11-26 00:32:21,705 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 12.0}
2024-11-26 00:32:21,768 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:21,789 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:21] "GET /api/graph/%20?min_score=11 HTTP/1.1" 200 -
2024-11-26 00:32:21,887 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:21,916 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:21,924 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:21,924 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:22,102 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:22] "GET /api/graph/%20?min_score=12 HTTP/1.1" 200 -
2024-11-26 00:32:22,168 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:22,216 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:22,217 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 14.0
2024-11-26 00:32:22,217 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 14.0}
2024-11-26 00:32:22,260 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:22,288 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:22,292 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:22,293 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:22,293 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 13.0
2024-11-26 00:32:22,295 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 13.0}
2024-11-26 00:32:22,300 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 16.0
2024-11-26 00:32:22,301 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 16.0}
2024-11-26 00:32:22,409 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:22,420 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:22] "GET /api/graph/%20?min_score=14 HTTP/1.1" 200 -
2024-11-26 00:32:22,457 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:22,475 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:22] "GET /api/graph/%20?min_score=13 HTTP/1.1" 200 -
2024-11-26 00:32:22,526 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:22,526 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:22] "GET /api/graph/%20?min_score=16 HTTP/1.1" 200 -
2024-11-26 00:32:30,577 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:30,670 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:30,673 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:30,673 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 22.0
2024-11-26 00:32:30,673 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 22.0}
2024-11-26 00:32:30,853 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 787 relaciones cumplen el criterio de similitud
2024-11-26 00:32:30,868 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:30] "GET /api/graph/%20?min_score=22 HTTP/1.1" 200 -
2024-11-26 00:32:30,976 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:31,066 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:31,084 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:31,122 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-26 00:32:31,199 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-26 00:32:31,352 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-26 00:32:31,355 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:31] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:46,280 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:46,424 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:46,424 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:46,424 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T con similitud m√≠nima de 33.0
2024-11-26 00:32:46,424 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T', 'min_score': 33.0}
2024-11-26 00:32:46,682 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:46] "GET /api/graph/T?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:48,091 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:48,164 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:48,164 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:48,165 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T- con similitud m√≠nima de 33.0
2024-11-26 00:32:48,165 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-', 'min_score': 33.0}
2024-11-26 00:32:48,231 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:48] "GET /api/graph/T-?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:48,293 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:48,358 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:48,358 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:48,358 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:48] "[36mGET /static/assets/images/cr7.jpg HTTP/1.1[0m" 304 -
2024-11-26 00:32:48,463 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:48,513 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:48,513 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:48,513 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-1 con similitud m√≠nima de 33.0
2024-11-26 00:32:48,513 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-1', 'min_score': 33.0}
2024-11-26 00:32:48,609 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:48] "GET /api/graph/T-1?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:48,701 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:48,780 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:48,795 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:48,796 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:48,796 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-12 con similitud m√≠nima de 33.0
2024-11-26 00:32:48,796 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-12', 'min_score': 33.0}
2024-11-26 00:32:48,869 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:48] "GET /api/graph/T-12?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:48,869 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:48,879 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:48,880 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-123 con similitud m√≠nima de 33.0
2024-11-26 00:32:48,880 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-123', 'min_score': 33.0}
2024-11-26 00:32:48,944 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:48] "GET /api/graph/T-123?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:49,135 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:49,198 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:49,198 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:49,199 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-123- con similitud m√≠nima de 33.0
2024-11-26 00:32:49,199 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-123-', 'min_score': 33.0}
2024-11-26 00:32:49,249 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:49] "GET /api/graph/T-123-?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:49,694 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:49,757 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:49,757 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:49,758 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-123-2 con similitud m√≠nima de 33.0
2024-11-26 00:32:49,758 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-123-2', 'min_score': 33.0}
2024-11-26 00:32:49,820 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:49] "GET /api/graph/T-123-2?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:32:49,847 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:32:49,909 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:32:49,909 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:32:49,910 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para: T-123-23 con similitud m√≠nima de 33.0
2024-11-26 00:32:49,910 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'providencia': 'T-123-23', 'min_score': 33.0}
2024-11-26 00:32:49,968 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 26 relaciones cumplen el criterio de similitud
2024-11-26 00:32:49,968 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:32:49] "GET /api/graph/T-123-23?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:33:02,842 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:02,921 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:02,921 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:02,921 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-26 00:33:02,921 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-26 00:33:03,022 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-26 00:33:03,022 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:03] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:33:05,042 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:05,104 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:05,104 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:05,104 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 31.0
2024-11-26 00:33:05,105 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 31.0}
2024-11-26 00:33:05,202 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 145 relaciones cumplen el criterio de similitud
2024-11-26 00:33:05,205 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:05] "GET /api/graph/%20?min_score=31 HTTP/1.1" 200 -
2024-11-26 00:33:05,476 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:05,536 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:05,678 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:05,910 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:05,915 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:05,990 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:05,991 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:05,991 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 34.0
2024-11-26 00:33:05,992 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 34.0}
2024-11-26 00:33:05,993 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 33.0
2024-11-26 00:33:06,022 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:06,026 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:06,079 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 33.0}
2024-11-26 00:33:06,087 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 89 relaciones cumplen el criterio de similitud
2024-11-26 00:33:06,096 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:06,141 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:06,147 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:06] "GET /api/graph/%20?min_score=34 HTTP/1.1" 200 -
2024-11-26 00:33:06,148 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:06,149 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 37.0
2024-11-26 00:33:06,150 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 37.0}
2024-11-26 00:33:06,151 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:06,151 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 36.0
2024-11-26 00:33:06,152 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 36.0}
2024-11-26 00:33:06,169 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:06,242 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 53 relaciones cumplen el criterio de similitud
2024-11-26 00:33:06,248 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:06,250 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:06] "GET /api/graph/%20?min_score=37 HTTP/1.1" 200 -
2024-11-26 00:33:06,251 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 35.0
2024-11-26 00:33:06,251 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 35.0}
2024-11-26 00:33:06,312 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 63 relaciones cumplen el criterio de similitud
2024-11-26 00:33:06,337 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 105 relaciones cumplen el criterio de similitud
2024-11-26 00:33:06,369 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 74 relaciones cumplen el criterio de similitud
2024-11-26 00:33:06,452 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:06] "GET /api/graph/%20?min_score=36 HTTP/1.1" 200 -
2024-11-26 00:33:06,455 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:06] "GET /api/graph/%20?min_score=35 HTTP/1.1" 200 -
2024-11-26 00:33:06,459 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:06] "GET /api/graph/%20?min_score=33 HTTP/1.1" 200 -
2024-11-26 00:33:07,313 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:07,439 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:07,469 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:07,470 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 38.0
2024-11-26 00:33:07,470 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 38.0}
2024-11-26 00:33:07,548 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 47 relaciones cumplen el criterio de similitud
2024-11-26 00:33:07,588 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:07] "GET /api/graph/%20?min_score=38 HTTP/1.1" 200 -
2024-11-26 00:33:07,765 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:07,851 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:07,887 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:07,888 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 39.0
2024-11-26 00:33:07,889 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 39.0}
2024-11-26 00:33:07,954 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 40 relaciones cumplen el criterio de similitud
2024-11-26 00:33:08,051 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:08] "GET /api/graph/%20?min_score=39 HTTP/1.1" 200 -
2024-11-26 00:33:08,178 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:08,201 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:08,211 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:08,223 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:08,297 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:08,298 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:08,298 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 42.0
2024-11-26 00:33:08,299 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 42.0}
2024-11-26 00:33:08,333 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:08,343 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:08,343 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 40.0
2024-11-26 00:33:08,345 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 40.0}
2024-11-26 00:33:08,357 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 29 relaciones cumplen el criterio de similitud
2024-11-26 00:33:08,357 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:08] "GET /api/graph/%20?min_score=42 HTTP/1.1" 200 -
2024-11-26 00:33:08,373 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:08,373 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:08,373 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 44.0
2024-11-26 00:33:08,373 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 44.0}
2024-11-26 00:33:08,407 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:08,417 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:08,418 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 46.0
2024-11-26 00:33:08,418 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 46.0}
2024-11-26 00:33:08,441 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 23 relaciones cumplen el criterio de similitud
2024-11-26 00:33:08,443 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:08] "GET /api/graph/%20?min_score=44 HTTP/1.1" 200 -
2024-11-26 00:33:08,485 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 37 relaciones cumplen el criterio de similitud
2024-11-26 00:33:08,487 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:08] "GET /api/graph/%20?min_score=40 HTTP/1.1" 200 -
2024-11-26 00:33:08,509 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 18 relaciones cumplen el criterio de similitud
2024-11-26 00:33:08,510 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:08] "GET /api/graph/%20?min_score=46 HTTP/1.1" 200 -
2024-11-26 00:33:09,377 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:09,440 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:09,440 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:09,440 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 48.0
2024-11-26 00:33:09,451 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 48.0}
2024-11-26 00:33:09,520 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 12 relaciones cumplen el criterio de similitud
2024-11-26 00:33:09,520 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:09] "GET /api/graph/%20?min_score=48 HTTP/1.1" 200 -
2024-11-26 00:33:09,741 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:09,807 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:09,807 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:09,808 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 51.0
2024-11-26 00:33:09,808 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 51.0}
2024-11-26 00:33:09,826 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:09,874 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-26 00:33:09,890 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:09] "GET /api/graph/%20?min_score=51 HTTP/1.1" 200 -
2024-11-26 00:33:09,916 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:09,929 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:09,960 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:09,961 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-26 00:33:09,962 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-26 00:33:10,006 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:10,027 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-26 00:33:10,028 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:10] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-26 00:33:10,060 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:10,063 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:10,063 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 54.0
2024-11-26 00:33:10,063 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 54.0}
2024-11-26 00:33:10,088 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:10,088 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:10,089 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 59.0
2024-11-26 00:33:10,089 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 59.0}
2024-11-26 00:33:10,154 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 00:33:10,155 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:10] "GET /api/graph/%20?min_score=59 HTTP/1.1" 200 -
2024-11-26 00:33:10,157 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-26 00:33:10,159 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:10] "GET /api/graph/%20?min_score=54 HTTP/1.1" 200 -
2024-11-26 00:33:10,164 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:10,227 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:10,227 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:10,228 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 61.0
2024-11-26 00:33:10,228 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 61.0}
2024-11-26 00:33:10,310 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 00:33:10,311 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:10] "GET /api/graph/%20?min_score=61 HTTP/1.1" 200 -
2024-11-26 00:33:11,076 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,138 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,138 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,138 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 67.0
2024-11-26 00:33:11,138 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 67.0}
2024-11-26 00:33:11,207 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=67 HTTP/1.1" 200 -
2024-11-26 00:33:11,388 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,453 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,453 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,453 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 66.0
2024-11-26 00:33:11,453 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 66.0}
2024-11-26 00:33:11,478 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,544 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=66 HTTP/1.1" 200 -
2024-11-26 00:33:11,549 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,549 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,549 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 68.0
2024-11-26 00:33:11,549 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 68.0}
2024-11-26 00:33:11,632 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=68 HTTP/1.1" 200 -
2024-11-26 00:33:11,654 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,671 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,733 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,733 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,733 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 70.0
2024-11-26 00:33:11,733 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 70.0}
2024-11-26 00:33:11,733 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,733 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,733 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 69.0
2024-11-26 00:33:11,733 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 69.0}
2024-11-26 00:33:11,767 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:11,840 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=69 HTTP/1.1" 200 -
2024-11-26 00:33:11,866 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=70 HTTP/1.1" 200 -
2024-11-26 00:33:11,869 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:11,869 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:11,870 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 72.0
2024-11-26 00:33:11,871 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 72.0}
2024-11-26 00:33:11,935 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:11] "GET /api/graph/%20?min_score=72 HTTP/1.1" 200 -
2024-11-26 00:33:12,794 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:12,863 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:12,863 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:12,863 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 73.0
2024-11-26 00:33:12,864 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 73.0}
2024-11-26 00:33:12,930 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:12] "GET /api/graph/%20?min_score=73 HTTP/1.1" 200 -
2024-11-26 00:33:13,092 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:13,100 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:13,181 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:13,181 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:13,181 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 90.0
2024-11-26 00:33:13,182 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 90.0}
2024-11-26 00:33:13,184 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:13,184 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:13,185 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 81.0
2024-11-26 00:33:13,185 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 81.0}
2024-11-26 00:33:13,279 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:13] "GET /api/graph/%20?min_score=90 HTTP/1.1" 200 -
2024-11-26 00:33:13,279 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:13] "GET /api/graph/%20?min_score=81 HTTP/1.1" 200 -
2024-11-26 00:33:13,306 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:13,345 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:13,370 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:13,371 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:13,371 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 99.0
2024-11-26 00:33:13,372 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 99.0}
2024-11-26 00:33:13,382 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:13,451 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:13,451 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:13,451 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 100.0
2024-11-26 00:33:13,451 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 100.0}
2024-11-26 00:33:13,468 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:13,469 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:13] "GET /api/graph/%20?min_score=99 HTTP/1.1" 200 -
2024-11-26 00:33:13,474 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:13,475 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 96.0
2024-11-26 00:33:13,475 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 96.0}
2024-11-26 00:33:13,532 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:13] "GET /api/graph/%20?min_score=100 HTTP/1.1" 200 -
2024-11-26 00:33:13,560 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:13] "GET /api/graph/%20?min_score=96 HTTP/1.1" 200 -
2024-11-26 00:33:14,382 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:14,443 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:14,444 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:14,444 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 97.0
2024-11-26 00:33:14,445 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 97.0}
2024-11-26 00:33:14,507 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:14] "GET /api/graph/%20?min_score=97 HTTP/1.1" 200 -
2024-11-26 00:33:14,786 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:14,849 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:14,849 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:14,850 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:14,852 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 86.0
2024-11-26 00:33:14,852 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 86.0}
2024-11-26 00:33:14,939 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:14,940 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:14,941 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 87.0
2024-11-26 00:33:14,941 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 87.0}
2024-11-26 00:33:14,944 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:14] "GET /api/graph/%20?min_score=86 HTTP/1.1" 200 -
2024-11-26 00:33:14,966 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:15,033 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:15] "GET /api/graph/%20?min_score=87 HTTP/1.1" 200 -
2024-11-26 00:33:15,034 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:15,035 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:15,037 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:15] "[36mGET /static/assets/images/cr7.jpg HTTP/1.1[0m" 304 -
2024-11-26 00:33:15,078 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:15,152 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:15,152 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:15,153 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 96.0
2024-11-26 00:33:15,153 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 96.0}
2024-11-26 00:33:15,217 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:15] "GET /api/graph/%20?min_score=96 HTTP/1.1" 200 -
2024-11-26 00:33:36,430 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 00:33:36,529 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 00:33:36,529 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 00:33:36,529 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-26 00:33:36,529 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-26 00:33:36,596 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-26 00:33:36,596 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 00:33:36] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-26 01:16:28,514 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:16:30,063 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:16:32,539 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:16:47,922 - neo4j.io - ERROR - [_bolt.py:1037] - [#D6F2]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-26 01:16:47,928 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-26 01:16:47,929 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-26 01:16:47,929 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-26 01:16:47,930 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-26 01:16:47,930 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 01:16:47,931 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'CORTE'}
2024-11-26 01:16:47,931 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'CORTE'}}
2024-11-26 01:16:48,472 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:16:48,472 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:16:48,472 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 01:16:48,472 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'corte'}
2024-11-26 01:16:48,472 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'corte'}}
2024-11-26 01:16:48,506 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:16:48,506 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:16:48,513 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 01:16:48,513 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {}
2024-11-26 01:16:48,513 - routes.search - INFO - [search.py:107] - Query final: {}
2024-11-26 01:16:48,732 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 01:16:48,743 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:16:48] "[35m[1mGET /api/search?texto=CORTE HTTP/1.1[0m" 21 -
2024-11-26 01:16:49,294 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 01:16:49,303 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:16:49] "[35m[1mGET /api/search?texto=corte HTTP/1.1[0m" 21 -
2024-11-26 01:16:50,034 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 21
2024-11-26 01:16:50,037 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:16:50] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-26 01:17:31,001 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:17:31,177 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:17:31,177 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:17:31,178 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 01:17:31,178 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'Villada'}
2024-11-26 01:17:31,178 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'Villada'}}
2024-11-26 01:17:31,296 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-26 01:17:31,298 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:17:31] "[1mGET /api/search?texto=Villada+ HTTP/1.1[0m" 1 -
2024-11-26 01:17:31,950 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:17:32,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:17:32,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:17:32,013 - routes.search - INFO - [search.py:66] - Iniciando b√∫squeda general
2024-11-26 01:17:32,013 - routes.search - INFO - [search.py:73] - Par√°metros limpios: {'texto': 'Villada'}
2024-11-26 01:17:32,013 - routes.search - INFO - [search.py:107] - Query final: {'$text': {'$search': 'Villada'}}
2024-11-26 01:17:32,138 - routes.search - INFO - [search.py:120] - B√∫squeda completada. Resultados encontrados: 1
2024-11-26 01:17:32,138 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:17:32] "[1mGET /api/search?texto=Villada HTTP/1.1[0m" 1 -
2024-11-26 01:26:12,406 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:12,438 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:12,438 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:12,480 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:12,485 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:12,564 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:31,764 - neo4j.io - ERROR - [_bolt.py:1037] - [#E2A7]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-26 01:26:31,764 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-26 01:26:31,764 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-26 01:26:31,764 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-26 01:26:31,764 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-26 01:26:31,764 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 54.0
2024-11-26 01:26:31,764 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 54.0}
2024-11-26 01:26:32,255 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:32,255 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:32,256 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 55.0
2024-11-26 01:26:32,256 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 55.0}
2024-11-26 01:26:32,325 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:32,325 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:32,325 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 58.0
2024-11-26 01:26:32,325 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 58.0}
2024-11-26 01:26:32,341 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:32,345 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:32,345 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:32,345 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:32,345 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 53.0
2024-11-26 01:26:32,345 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 56.0
2024-11-26 01:26:32,345 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 53.0}
2024-11-26 01:26:32,345 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 56.0}
2024-11-26 01:26:32,357 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,357 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,357 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=55 HTTP/1.1" 200 -
2024-11-26 01:26:32,357 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=54 HTTP/1.1" 200 -
2024-11-26 01:26:32,382 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:32,400 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:32,401 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 57.0
2024-11-26 01:26:32,401 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 57.0}
2024-11-26 01:26:32,432 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,433 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=53 HTTP/1.1" 200 -
2024-11-26 01:26:32,467 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,468 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=56 HTTP/1.1" 200 -
2024-11-26 01:26:32,469 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,470 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-26 01:26:32,499 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:32,501 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:32] "GET /api/graph/%20?min_score=57 HTTP/1.1" 200 -
2024-11-26 01:26:33,968 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,031 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,042 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,042 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,043 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 61.0
2024-11-26 01:26:34,043 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 61.0}
2024-11-26 01:26:34,051 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,058 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,072 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,075 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:34,153 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,153 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,153 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 51.0
2024-11-26 01:26:34,154 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 51.0}
2024-11-26 01:26:34,207 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,207 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=61 HTTP/1.1" 200 -
2024-11-26 01:26:34,240 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,241 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,242 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 52.0
2024-11-26 01:26:34,243 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,243 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,243 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 52.0}
2024-11-26 01:26:34,245 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,245 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 63.0
2024-11-26 01:26:34,246 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 63.0}
2024-11-26 01:26:34,246 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,247 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 60.0
2024-11-26 01:26:34,247 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 60.0}
2024-11-26 01:26:34,276 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,276 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=51 HTTP/1.1" 200 -
2024-11-26 01:26:34,308 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 9 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,313 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=52 HTTP/1.1" 200 -
2024-11-26 01:26:34,337 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,340 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=60 HTTP/1.1" 200 -
2024-11-26 01:26:34,379 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:34,379 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,379 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:34,380 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=63 HTTP/1.1" 200 -
2024-11-26 01:26:34,380 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 59.0
2024-11-26 01:26:34,381 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 59.0}
2024-11-26 01:26:34,448 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:34,450 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:34] "GET /api/graph/%20?min_score=59 HTTP/1.1" 200 -
2024-11-26 01:26:35,786 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:35,786 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:35,881 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:35,881 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:35,881 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:35,881 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:35,881 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 48.0
2024-11-26 01:26:35,881 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:35,881 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 46.0
2024-11-26 01:26:35,881 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 48.0}
2024-11-26 01:26:35,881 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 46.0}
2024-11-26 01:26:35,897 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:35,912 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:35,923 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:36,033 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:36,033 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:36,033 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 54.0
2024-11-26 01:26:36,033 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 54.0}
2024-11-26 01:26:36,059 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:36,061 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:36,062 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 53.0
2024-11-26 01:26:36,063 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 53.0}
2024-11-26 01:26:36,063 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:36,064 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:36,064 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 56.0
2024-11-26 01:26:36,065 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 56.0}
2024-11-26 01:26:36,066 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 12 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,067 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=48 HTTP/1.1" 200 -
2024-11-26 01:26:36,127 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,138 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=54 HTTP/1.1" 200 -
2024-11-26 01:26:36,144 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:36,144 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:36,145 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 55.0
2024-11-26 01:26:36,145 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 55.0}
2024-11-26 01:26:36,205 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 7 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,206 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=53 HTTP/1.1" 200 -
2024-11-26 01:26:36,236 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 18 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,239 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,250 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=46 HTTP/1.1" 200 -
2024-11-26 01:26:36,251 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=55 HTTP/1.1" 200 -
2024-11-26 01:26:36,270 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:36,362 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:36] "GET /api/graph/%20?min_score=56 HTTP/1.1" 200 -
2024-11-26 01:26:37,669 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:37,671 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:37,735 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:37,751 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:37,763 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:37,763 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:37,763 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:37,763 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 57.0
2024-11-26 01:26:37,763 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:37,763 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 57.0}
2024-11-26 01:26:37,763 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 58.0
2024-11-26 01:26:37,767 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 58.0}
2024-11-26 01:26:37,894 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:37,894 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:37] "GET /api/graph/%20?min_score=57 HTTP/1.1" 200 -
2024-11-26 01:26:37,894 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:37,894 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:37,899 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:37,899 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:37,899 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:37,899 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:37] "GET /api/graph/%20?min_score=58 HTTP/1.1" 200 -
2024-11-26 01:26:37,899 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 61.0
2024-11-26 01:26:37,899 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 60.0
2024-11-26 01:26:37,902 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 61.0}
2024-11-26 01:26:37,902 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 60.0}
2024-11-26 01:26:37,965 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:37,966 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:37] "GET /api/graph/%20?min_score=61 HTTP/1.1" 200 -
2024-11-26 01:26:38,017 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 1 relaciones cumplen el criterio de similitud
2024-11-26 01:26:38,019 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:38] "GET /api/graph/%20?min_score=60 HTTP/1.1" 200 -
2024-11-26 01:26:50,075 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:50,217 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:50,217 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:50,217 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 40.0
2024-11-26 01:26:50,217 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 40.0}
2024-11-26 01:26:50,280 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 37 relaciones cumplen el criterio de similitud
2024-11-26 01:26:50,280 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:50] "GET /api/graph/%20?min_score=40 HTTP/1.1" 200 -
2024-11-26 01:26:55,941 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-26 01:26:56,003 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-26 01:26:56,004 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-26 01:26:56,004 - routes.similitudes - INFO - [similitudes.py:87] - Buscando grafo para:   con similitud m√≠nima de 56.0
2024-11-26 01:26:56,005 - routes.similitudes - INFO - [similitudes.py:133] - Ejecutando consulta con par√°metros: {'min_score': 56.0}
2024-11-26 01:26:56,067 - routes.similitudes - INFO - [similitudes.py:161] - Filtrado completado: 3 relaciones cumplen el criterio de similitud
2024-11-26 01:26:56,068 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [26/Nov/2024 01:26:56] "GET /api/graph/%20?min_score=56 HTTP/1.1" 200 -
2024-11-26 01:45:21,230 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
2024-11-26 01:45:22,095 - BigMongoData - INFO - [app.py:170] - Cerrando conexiones...
