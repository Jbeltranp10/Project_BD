2024-11-24 17:57:46,370 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-24 17:57:46,371 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-24 17:57:46,462 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-24 17:57:48,179 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-24 17:57:48,297 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-24 17:57:48,297 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x0000018848F460F0>
2024-11-24 17:57:49,007 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-24 17:57:49,087 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-24 17:57:49,088 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-24 17:57:49,379 - werkzeug - INFO - [_internal.py:96] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-11-24 17:57:49,380 - werkzeug - INFO - [_internal.py:96] - [33mPress CTRL+C to quit[0m
2024-11-24 17:57:49,389 - werkzeug - INFO - [_internal.py:96] -  * Restarting with stat
2024-11-24 17:57:52,649 - BigMongoData - INFO - [app.py:149] - Iniciando aplicaci√≥n BigMongoData...
2024-11-24 17:57:52,649 - BigMongoData - INFO - [app.py:39] - Iniciando conexi√≥n con MongoDB...
2024-11-24 17:57:52,788 - BigMongoData - INFO - [app.py:44] - Comenzando creaci√≥n de √≠ndices en MongoDB...
2024-11-24 17:57:54,496 - BigMongoData - INFO - [app.py:57] - √çndices creados correctamente
2024-11-24 17:57:54,611 - BigMongoData - INFO - [app.py:68] - Iniciando conexi√≥n con Neo4j...
2024-11-24 17:57:54,612 - BigMongoData - INFO - [app.py:71] - <neo4j._sync.driver.Neo4jDriver object at 0x000001F003803380>
2024-11-24 17:57:55,066 - BigMongoData - INFO - [app.py:76] - Verificaci√≥n de conectividad exitosa
2024-11-24 17:57:55,128 - BigMongoData - INFO - [app.py:83] - Prueba de consulta exitosa
2024-11-24 17:57:55,129 - BigMongoData - INFO - [app.py:167] - Iniciando servidor Flask...
2024-11-24 17:57:55,143 - werkzeug - WARNING - [_internal.py:96] -  * Debugger is active!
2024-11-24 17:57:55,148 - werkzeug - INFO - [_internal.py:96] -  * Debugger PIN: 116-940-259
2024-11-24 17:59:08,827 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:09,649 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:09,717 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:09,718 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-24 17:59:12,512 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:12] "GET / HTTP/1.1" 200 -
2024-11-24 17:59:14,024 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:14,040 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:14,098 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:14,101 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:14,139 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:14,208 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:14,263 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:14,286 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:14,305 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:14,309 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:14,314 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:14,352 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:14,354 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:14,384 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:14,393 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:14,638 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:14] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-24 17:59:14,719 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:14] "GET /static/css/search.css HTTP/1.1" 200 -
2024-11-24 17:59:14,751 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:14] "GET /static/css/main.css HTTP/1.1" 200 -
2024-11-24 17:59:14,951 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:14] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-24 17:59:15,099 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:15] "GET /static/js/main.js HTTP/1.1" 200 -
2024-11-24 17:59:16,824 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:16,900 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:16,906 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:16,907 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-24 17:59:17,259 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-24 17:59:17,261 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:17] "GET /api/stats HTTP/1.1" 200 -
2024-11-24 17:59:17,781 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:17,846 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:17,847 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:17,848 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:17] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2024-11-24 17:59:34,860 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:34,939 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:34,939 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:34,939 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.0)
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,083 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,095 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,097 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:35,099 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:35] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-24 17:59:40,207 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:40,286 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:40,286 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:40,286 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.18)
2024-11-24 17:59:40,366 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,366 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,366 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,382 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,382 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,382 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,382 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,390 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:40,390 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:40] "GET /api/graph/T-012-24?min_score=18 HTTP/1.1" 200 -
2024-11-24 17:59:44,937 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 17:59:45,078 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 17:59:45,078 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 17:59:45,079 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.84)
2024-11-24 17:59:45,171 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,173 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,175 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,176 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,178 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,180 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,182 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,184 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 17:59:45,187 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 17:59:45] "GET /api/graph/T-012-24?min_score=84 HTTP/1.1" 200 -
2024-11-24 17:59:59,922 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:00,001 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:00,001 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:00,001 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012 (score m√≠n: 0.84)
2024-11-24 18:00:00,080 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,128 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,144 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,232 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,244 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,251 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,255 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,267 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 18:00:00,279 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:00] "[33mGET /api/graph/T-012?min_score=84 HTTP/1.1[0m" 404 -
2024-11-24 18:00:01,440 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:01,503 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:01,503 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:01,503 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 18:00:01,503 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-24 18:00:01,503 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-24 18:00:02,090 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 13
2024-11-24 18:00:02,090 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:02] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-24 18:00:08,804 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:08,877 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:08,877 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:08,878 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 18:00:08,878 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto', 'anio': '2024'}
2024-11-24 18:00:08,878 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto', 'anio': '2024'}
2024-11-24 18:00:09,224 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 4
2024-11-24 18:00:09,234 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:09] "[31m[1mGET /api/search?tipo=Auto&anio=2024 HTTP/1.1[0m" 4 -
2024-11-24 18:00:15,120 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:15,246 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:15,246 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:15,246 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 18:00:15,246 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2024'}
2024-11-24 18:00:15,246 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2024'}
2024-11-24 18:00:15,719 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 5
2024-11-24 18:00:15,719 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:15] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-24 18:00:21,332 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:21,400 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:21,400 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:21,401 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 18:00:21,401 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-24 18:00:21,401 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-24 18:00:22,213 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-24 18:00:22,223 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:22] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-24 18:00:31,593 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:00:31,672 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:00:31,672 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:00:31,672 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-24 18:00:31,798 - routes.search - INFO - [search.py:47] - Providencia encontrada: A053-24
2024-11-24 18:00:31,815 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:00:31] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-24 18:12:42,752 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:04,476 - neo4j.io - ERROR - [_bolt.py:1037] - [#E5B0]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-24 18:13:04,477 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-24 18:13:04,477 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-24 18:13:04,478 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-24 18:13:04,478 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-24 18:13:04,478 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-24 18:13:04,479 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:04] "GET / HTTP/1.1" 200 -
2024-11-24 18:13:05,852 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:05,865 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:05,968 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:05,981 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:06,011 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:06,416 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:06,417 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:06,418 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:06,418 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:06,418 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:06] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-24 18:13:06,420 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:06] "GET /static/css/main.css HTTP/1.1" 200 -
2024-11-24 18:13:06,421 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:06,422 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:06,424 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:06] "GET /static/js/graph-viewer.js HTTP/1.1" 200 -
2024-11-24 18:13:06,425 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:06,425 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:06,426 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:06] "GET /static/js/main.js HTTP/1.1" 200 -
2024-11-24 18:13:06,432 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:06,433 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:06,434 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:06] "GET /static/css/search.css HTTP/1.1" 200 -
2024-11-24 18:13:08,149 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:08,188 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 18:13:08,212 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:08,212 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:08,212 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-24 18:13:08,243 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 18:13:08,243 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 18:13:08,243 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:08] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2024-11-24 18:13:08,558 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-24 18:13:08,558 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 18:13:08] "GET /api/stats HTTP/1.1" 200 -
2024-11-24 19:05:37,236 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:05:37,239 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:05:53,671 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:05:56,481 - neo4j.io - ERROR - [_bolt.py:1037] - [#E8EA]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-24 19:05:56,482 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-24 19:05:56,482 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-24 19:05:56,482 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-24 19:05:56,482 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-24 19:05:56,482 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:05:56] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-24 19:05:57,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:05:57,013 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:05:57,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:05:57,013 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:05:57,013 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 19:05:57,013 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-24 19:05:57,013 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-24 19:05:57,013 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:05:57] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-24 19:05:57,596 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 13
2024-11-24 19:05:57,607 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:05:57] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-24 19:06:06,777 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:06:06,939 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:06:06,939 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:06:06,940 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 19:06:06,940 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-24 19:06:06,940 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-24 19:06:07,766 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-24 19:06:07,774 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:06:07] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-24 19:06:20,422 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:06:20,486 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:06:20,486 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:06:20,486 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.0)
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,581 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,597 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-24 19:06:20,597 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:06:20] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-24 19:12:46,499 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:13:05,513 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:13:05,798 - neo4j.io - ERROR - [_bolt.py:1037] - [#EF8A]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-24 19:13:05,799 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-24 19:13:05,799 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-24 19:13:05,799 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-24 19:13:05,799 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-24 19:13:05,799 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: V
2024-11-24 19:13:05,799 - routes.search - WARNING - [search.py:33] - Formato de ID inv√°lido: V
2024-11-24 19:13:05,799 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:13:05] "[31m[1mGET /api/providencia/V HTTP/1.1[0m" 400 -
2024-11-24 19:13:06,325 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:13:06,325 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:13:06,325 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 19:13:06,325 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2024'}
2024-11-24 19:13:06,325 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2024'}
2024-11-24 19:13:06,794 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 5
2024-11-24 19:13:06,800 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:13:06] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-24 19:13:07,328 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:13:07,389 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:13:07,389 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:13:07,389 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: V
2024-11-24 19:13:07,389 - routes.search - WARNING - [search.py:33] - Formato de ID inv√°lido: V
2024-11-24 19:13:07,389 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:13:07] "[31m[1mGET /api/providencia/V HTTP/1.1[0m" 400 -
2024-11-24 19:13:14,674 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:13:14,737 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:13:14,737 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:13:14,737 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 19:13:14,737 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-24 19:13:14,737 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-24 19:13:15,575 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-24 19:13:15,577 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:13:15] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-24 19:13:39,246 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 19:13:39,339 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 19:13:39,339 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 19:13:39,340 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-24 19:13:39,457 - routes.search - INFO - [search.py:47] - Providencia encontrada: A053-24
2024-11-24 19:13:39,458 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 19:13:39] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-24 20:55:21,367 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-24 20:55:21,953 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-24 20:55:21,953 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-24 20:55:21,953 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-24 20:55:21,953 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-24 20:55:21,953 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-24 20:55:22,542 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 13
2024-11-24 20:55:22,542 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [24/Nov/2024 20:55:22] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 00:26:48,150 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:26:48,774 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:26:48,774 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:26:48,774 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 00:26:48,899 - routes.search - INFO - [search.py:47] - Providencia encontrada: A053-24
2024-11-25 00:26:48,900 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:26:48] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 00:29:38,451 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:29:38,609 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:29:38,609 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:29:38,609 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: A499-21 (score m√≠n: 0.12)
2024-11-25 00:29:38,690 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,691 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,692 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,694 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,694 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,696 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,697 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,699 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:29:38,700 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:29:38] "GET /api/graph/A499-21?min_score=12 HTTP/1.1" 200 -
2024-11-25 00:30:15,029 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:15,110 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:15,110 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:15,111 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 00:30:15,116 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:15] "GET / HTTP/1.1" 200 -
2024-11-25 00:30:16,453 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:16,516 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:16,517 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:16,519 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:16] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 00:30:16,665 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:16,700 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:16,731 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:16,732 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:16,733 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:16] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 00:30:16,780 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:16,806 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:16,849 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:16,859 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:16,897 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:16] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 00:30:16,947 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:16,950 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:16,951 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:16] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 00:30:17,069 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:17,072 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:17,073 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:17] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 00:30:18,747 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:18,810 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:18,810 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:18,811 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-25 00:30:19,162 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-25 00:30:19,163 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:19] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 00:30:30,682 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:30:30,789 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:30:30,789 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:30:30,789 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: T-012-24 (score m√≠n: 0.0)
2024-11-25 00:30:30,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,883 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,889 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:30:30,889 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:30:30] "GET /api/graph/T-012-24?min_score=0 HTTP/1.1" 200 -
2024-11-25 00:31:02,836 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:31:02,914 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:31:02,914 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:31:02,914 - routes.similitudes - INFO - [similitudes.py:88] - Buscando grafo para: A124 (score m√≠n: 0.0)
2024-11-25 00:31:02,984 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 9, column: 30, offset: 331} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,984 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 10, column: 30, offset: 366} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,984 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 25, offset: 435} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,984 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 7, column: 25, offset: 255} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,990 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: tipo)} {position: line: 14, column: 30, offset: 511} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,991 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 18, column: 29, offset: 643} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,993 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: anio)} {position: line: 15, column: 30, offset: 546} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,994 - neo4j.notifications - WARNING - [result.py:332] - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 19, column: 29, offset: 679} for query: '\n            MATCH path = (p1:Providencia {nombre: $providencia})-[r:SIMILAR_A]->(p2:Providencia)\n            WHERE r.index_simm >= $min_score\n            WITH p1, p2, r, path\n            RETURN \n                collect(distinct {\n                    id: id(p1),\n                    nombre: p1.nombre,\n                    tipo: p1.tipo,\n                    anio: p1.anio\n                }) + collect(distinct {\n                    id: id(p2),\n                    nombre: p2.nombre,\n                    tipo: p2.tipo,\n                    anio: p2.anio\n                }) as nodes,\n                collect(distinct {\n                    source: id(p1),\n                    target: id(p2),\n                    score: r.index_simm,\n                    type: type(r)\n                }) as relationships,\n                count(r) as total_relations,\n                avg(r.index_simm) as avg_similarity,\n                max(r.index_simm) as max_similarity\n            '
2024-11-25 00:31:02,994 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:31:02] "[33mGET /api/graph/A124?min_score=0 HTTP/1.1[0m" 404 -
2024-11-25 00:32:33,385 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:33,508 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:33,508 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:33,508 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:33,508 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2024'}
2024-11-25 00:32:33,508 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2024'}
2024-11-25 00:32:33,988 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 5
2024-11-25 00:32:33,991 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:33] "[35m[1mGET /api/search?anio=2024 HTTP/1.1[0m" 5 -
2024-11-25 00:32:40,008 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:40,071 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:40,071 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:40,071 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:40,071 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:40,071 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:40,888 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:40,888 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:40] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 00:32:41,384 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:41,445 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:41,445 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:41,445 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:41,445 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:41,445 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:41,797 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:41,810 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:41] "[35m[1mGET /api/search?anio=21015 HTTP/1.1[0m" 21 -
2024-11-25 00:32:42,468 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:42,532 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:42,532 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:42,533 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:42,534 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:42,534 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:42,886 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:42,893 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:42] "[35m[1mGET /api/search?anio=21 HTTP/1.1[0m" 21 -
2024-11-25 00:32:43,341 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:43,402 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:43,402 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:43,402 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:43,402 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:43,402 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:43,760 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:43,771 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:43] "[35m[1mGET /api/search?anio=210 HTTP/1.1[0m" 21 -
2024-11-25 00:32:43,931 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:43,995 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:43,995 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:43,995 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:43,995 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:43,995 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:44,229 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:44,245 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:44] "[35m[1mGET /api/search?anio=2105 HTTP/1.1[0m" 21 -
2024-11-25 00:32:45,232 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:45,357 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:45,357 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:45,358 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:45,358 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:45,358 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:45,729 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:45,744 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:45] "[35m[1mGET /api/search?anio=2 HTTP/1.1[0m" 21 -
2024-11-25 00:32:46,830 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:46,884 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:46,884 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:46,884 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:46,884 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:46,884 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:47,378 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:47,385 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:47] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 00:32:47,683 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:47,758 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:47,758 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:47,758 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:47,758 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2015'}
2024-11-25 00:32:47,758 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2015'}
2024-11-25 00:32:47,877 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 00:32:47,877 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:47] "[35m[1mGET /api/search?anio=2015 HTTP/1.1[0m" 0 -
2024-11-25 00:32:56,368 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:56,572 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:56,573 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:56,574 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:56,574 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:32:56,574 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:32:57,383 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:32:57,389 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:57] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 00:32:58,628 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:32:58,692 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:32:58,692 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:32:58,693 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:32:58,693 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2014'}
2024-11-25 00:32:58,693 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2014'}
2024-11-25 00:32:58,808 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 00:32:58,808 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:32:58] "[35m[1mGET /api/search?anio=2014 HTTP/1.1[0m" 0 -
2024-11-25 00:33:09,863 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:09,947 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:09,947 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:09,948 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:09,948 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:09,948 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:10,758 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:10,762 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:10] "[35m[1mGET /api/search?anio=2 HTTP/1.1[0m" 21 -
2024-11-25 00:33:10,812 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:10,892 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:10,892 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:10,893 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:10,893 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:10,893 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:11,044 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:11,051 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:11] "[35m[1mGET /api/search?anio=203 HTTP/1.1[0m" 21 -
2024-11-25 00:33:11,925 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:11,983 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:11,983 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:11,983 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:11,983 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:11,983 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:12,352 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:12,357 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:12] "[35m[1mGET /api/search?anio=2030 HTTP/1.1[0m" 21 -
2024-11-25 00:33:23,067 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:23,166 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:23,166 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:23,166 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:23,166 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:23,166 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:23,983 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:23,991 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:23] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 00:33:26,541 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:26,605 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:26,605 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:26,605 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:26,605 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:26,605 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:27,421 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:27,421 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:27] "[35m[1mGET /api/search?anio=202 HTTP/1.1[0m" 21 -
2024-11-25 00:33:27,898 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:28,027 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:28,027 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:28,028 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:28,028 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2022'}
2024-11-25 00:33:28,028 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2022'}
2024-11-25 00:33:28,135 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 00:33:28,135 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:28] "[1mGET /api/search?anio=2022 HTTP/1.1[0m" 1 -
2024-11-25 00:33:32,775 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:32,850 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:32,850 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:32,851 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:32,851 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:33:32,851 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:33:33,656 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:33:33,664 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:33] "[35m[1mGET /api/search?anio=20 HTTP/1.1[0m" 21 -
2024-11-25 00:33:34,263 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:34,321 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:34,321 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:34,327 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:34,327 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2009'}
2024-11-25 00:33:34,327 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2009'}
2024-11-25 00:33:34,433 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 1
2024-11-25 00:33:34,433 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:34] "[1mGET /api/search?anio=2009 HTTP/1.1[0m" 1 -
2024-11-25 00:33:46,931 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:33:47,075 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:33:47,075 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:33:47,075 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:33:47,075 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'anio': '2011'}
2024-11-25 00:33:47,075 - routes.search - INFO - [search.py:102] - Query final: {'anio': '2011'}
2024-11-25 00:33:47,195 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 0
2024-11-25 00:33:47,195 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:33:47] "[35m[1mGET /api/search?anio=2011 HTTP/1.1[0m" 0 -
2024-11-25 00:34:01,535 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:34:01,664 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:34:01,664 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:34:01,664 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:34:01,664 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:34:01,664 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:34:02,476 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:34:02,479 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:34:02] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 00:34:11,734 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:34:11,821 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:34:11,822 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:34:11,823 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A053-24
2024-11-25 00:34:11,931 - routes.search - INFO - [search.py:47] - Providencia encontrada: A053-24
2024-11-25 00:34:11,931 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:34:11] "GET /api/providencia/A053-24 HTTP/1.1" 200 -
2024-11-25 00:40:00,394 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:40:19,682 - neo4j.io - ERROR - [_bolt.py:1037] - [#F897]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 00:40:19,689 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 00:40:19,689 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 00:40:19,690 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 00:40:19,690 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 00:40:19,690 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:40:19,691 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {'tipo': 'Auto'}
2024-11-25 00:40:19,691 - routes.search - INFO - [search.py:102] - Query final: {'providencia': {'$regex': '^A[0-9]{1,4}-[0-9]{2}$'}, 'tipo': 'Auto'}
2024-11-25 00:40:20,281 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 13
2024-11-25 00:40:20,285 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:40:20] "[1mGET /api/search?tipo=Auto HTTP/1.1[0m" 13 -
2024-11-25 00:42:14,867 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:42:15,370 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:42:15,414 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:42:15,418 - routes.search - INFO - [search.py:61] - Iniciando b√∫squeda general
2024-11-25 00:42:15,418 - routes.search - INFO - [search.py:68] - Par√°metros limpios: {}
2024-11-25 00:42:15,418 - routes.search - INFO - [search.py:102] - Query final: {}
2024-11-25 00:42:16,227 - routes.search - INFO - [search.py:115] - B√∫squeda completada. Resultados encontrados: 21
2024-11-25 00:42:16,227 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:42:16] "[35m[1mGET /api/search HTTP/1.1[0m" 21 -
2024-11-25 00:42:24,306 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:42:24,369 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:42:24,369 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:42:24,369 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 00:42:24,491 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 00:42:24,493 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:42:24] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 00:43:58,549 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:43:58,640 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:43:58,640 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:43:58,640 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 00:43:58,641 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:43:58] "GET / HTTP/1.1" 200 -
2024-11-25 00:43:59,858 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:43:59,909 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:43:59,927 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:43:59,927 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:43:59,928 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:43:59] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 00:43:59,970 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:43:59,970 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:44:00,001 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:44:00] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 00:44:00,284 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:44:00,299 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:44:00,299 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:44:00,407 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:44:00,408 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:44:00,409 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:44:00] "[36mGET /static/js/search.js HTTP/1.1[0m" 304 -
2024-11-25 00:44:00,583 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:44:00,584 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:44:00,585 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:44:00] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 00:44:00,589 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:44:00,589 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:44:00,590 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:44:00] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 00:44:02,120 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:44:02,179 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:44:02,179 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:44:02,179 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-25 00:44:02,527 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-25 00:44:02,527 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:44:02] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 00:45:43,463 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:45:43,470 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:45:43,614 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:45:43,614 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:45:43,614 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:45:43,615 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:45:43,616 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:45:43] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 00:45:43,617 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:45:43] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 00:46:07,009 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 00:46:07,132 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 00:46:07,132 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 00:46:07,132 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 00:46:07,251 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 00:46:07,252 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 00:46:07] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 01:16:14,559 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:33,837 - neo4j.io - ERROR - [_bolt.py:1037] - [#FD76]  _: <CONNECTION> error: Failed to read from defunct connection ResolvedIPv4Address(('34.69.128.95', 7687)) (ResolvedIPv4Address(('34.69.128.95', 7687))): OSError('No data')
2024-11-25 01:16:33,838 - neo4j.pool - ERROR - [_pool.py:939] - Unable to retrieve routing information
2024-11-25 01:16:33,838 - BigMongoData - ERROR - [app.py:135] - Error verificando Neo4j: Unable to retrieve routing information
2024-11-25 01:16:33,839 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: False
2024-11-25 01:16:33,839 - BigMongoData - ERROR - [app.py:146] - Una o m√°s bases de datos no est√°n disponibles
2024-11-25 01:16:33,839 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:16:33,840 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:33] "GET / HTTP/1.1" 200 -
2024-11-25 01:16:35,191 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:35,208 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:35,714 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:35,714 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:35,715 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:35,715 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:35,716 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:35] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:16:35,717 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:35] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:16:35,804 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:35,866 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:35,867 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:35,868 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:35] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:16:37,341 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:37,362 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:37,431 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:37,431 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:37,431 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:37,431 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:37,433 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:37] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:16:37,433 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:37] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 01:16:39,014 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:16:39,074 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:16:39,075 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:16:39,076 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-25 01:16:39,429 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-25 01:16:39,430 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:16:39] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:17:37,448 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:17:37,605 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:17:37,605 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:17:37,606 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 01:17:37,723 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 01:17:37,724 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:17:37] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 01:20:09,123 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:20:09,320 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:20:09,320 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:20:09,320 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 01:20:09,431 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 01:20:09,431 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:20:09] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
2024-11-25 01:21:19,174 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:19,301 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:19,301 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:19,302 - BigMongoData - INFO - [app.py:101] - Acceso a la p√°gina principal
2024-11-25 01:21:19,303 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:19] "GET / HTTP/1.1" 200 -
2024-11-25 01:21:20,576 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:20,589 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:20,638 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:20,639 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:20,641 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:20] "[36mGET /static/css/search.css HTTP/1.1[0m" 304 -
2024-11-25 01:21:20,667 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:20,668 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:20,670 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:20] "[36mGET /static/css/main.css HTTP/1.1[0m" 304 -
2024-11-25 01:21:20,868 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:20,924 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:20,929 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:20,937 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:20,939 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:20] "GET /static/js/search.js HTTP/1.1" 200 -
2024-11-25 01:21:20,950 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:20,995 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:20,996 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:20,997 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:20] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2024-11-25 01:21:21,056 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:21,056 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:21,058 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:21] "[36mGET /static/js/graph-viewer.js HTTP/1.1[0m" 304 -
2024-11-25 01:21:22,570 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:22,642 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:22,642 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:22,642 - routes.search - INFO - [search.py:129] - Obteniendo estad√≠sticas
2024-11-25 01:21:22,991 - routes.search - INFO - [search.py:157] - Estad√≠sticas generadas exitosamente
2024-11-25 01:21:23,004 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:23] "GET /api/stats HTTP/1.1" 200 -
2024-11-25 01:21:26,728 - BigMongoData - INFO - [app.py:120] - Conexi√≥n MongoDB verificada
2024-11-25 01:21:26,791 - BigMongoData - INFO - [app.py:133] - Conexi√≥n Neo4j verificada
2024-11-25 01:21:26,791 - BigMongoData - INFO - [app.py:138] - Estado de conexiones - MongoDB: True, Neo4j: True
2024-11-25 01:21:26,791 - routes.search - INFO - [search.py:30] - B√∫squeda de providencia espec√≠fica: A266-24
2024-11-25 01:21:26,903 - routes.search - INFO - [search.py:47] - Providencia encontrada: A266-24
2024-11-25 01:21:26,903 - werkzeug - INFO - [_internal.py:96] - 127.0.0.1 - - [25/Nov/2024 01:21:26] "GET /api/providencia/A266-24 HTTP/1.1" 200 -
